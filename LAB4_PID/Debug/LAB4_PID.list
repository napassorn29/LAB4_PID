
LAB4_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005514  08005514  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800551c  0800551c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000074  08005598  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005598  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc3  00000000  00000000  0002e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00030260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00030f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b00  00000000  00000000  00031bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f03c  00000000  00000000  000496d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000914cc  00000000  00000000  00058714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9be0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f5c  00000000  00000000  000e9c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005434 	.word	0x08005434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005434 	.word	0x08005434

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b974 	b.w	80008f8 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468e      	mov	lr, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14d      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000636:	428a      	cmp	r2, r1
 8000638:	4694      	mov	ip, r2
 800063a:	d969      	bls.n	8000710 <__udivmoddi4+0xe8>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b152      	cbz	r2, 8000658 <__udivmoddi4+0x30>
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	f1c2 0120 	rsb	r1, r2, #32
 800064a:	fa20 f101 	lsr.w	r1, r0, r1
 800064e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000652:	ea41 0e03 	orr.w	lr, r1, r3
 8000656:	4094      	lsls	r4, r2
 8000658:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800065c:	0c21      	lsrs	r1, r4, #16
 800065e:	fbbe f6f8 	udiv	r6, lr, r8
 8000662:	fa1f f78c 	uxth.w	r7, ip
 8000666:	fb08 e316 	mls	r3, r8, r6, lr
 800066a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066e:	fb06 f107 	mul.w	r1, r6, r7
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f106 30ff 	add.w	r0, r6, #4294967295
 800067e:	f080 811f 	bcs.w	80008c0 <__udivmoddi4+0x298>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 811c 	bls.w	80008c0 <__udivmoddi4+0x298>
 8000688:	3e02      	subs	r6, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a5b      	subs	r3, r3, r1
 800068e:	b2a4      	uxth	r4, r4
 8000690:	fbb3 f0f8 	udiv	r0, r3, r8
 8000694:	fb08 3310 	mls	r3, r8, r0, r3
 8000698:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800069c:	fb00 f707 	mul.w	r7, r0, r7
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x92>
 80006a4:	eb1c 0404 	adds.w	r4, ip, r4
 80006a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ac:	f080 810a 	bcs.w	80008c4 <__udivmoddi4+0x29c>
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	f240 8107 	bls.w	80008c4 <__udivmoddi4+0x29c>
 80006b6:	4464      	add	r4, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006be:	1be4      	subs	r4, r4, r7
 80006c0:	2600      	movs	r6, #0
 80006c2:	b11d      	cbz	r5, 80006cc <__udivmoddi4+0xa4>
 80006c4:	40d4      	lsrs	r4, r2
 80006c6:	2300      	movs	r3, #0
 80006c8:	e9c5 4300 	strd	r4, r3, [r5]
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0xc2>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	f000 80ef 	beq.w	80008ba <__udivmoddi4+0x292>
 80006dc:	2600      	movs	r6, #0
 80006de:	e9c5 0100 	strd	r0, r1, [r5]
 80006e2:	4630      	mov	r0, r6
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	fab3 f683 	clz	r6, r3
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d14a      	bne.n	8000788 <__udivmoddi4+0x160>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0xd4>
 80006f6:	4282      	cmp	r2, r0
 80006f8:	f200 80f9 	bhi.w	80008ee <__udivmoddi4+0x2c6>
 80006fc:	1a84      	subs	r4, r0, r2
 80006fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	469e      	mov	lr, r3
 8000706:	2d00      	cmp	r5, #0
 8000708:	d0e0      	beq.n	80006cc <__udivmoddi4+0xa4>
 800070a:	e9c5 4e00 	strd	r4, lr, [r5]
 800070e:	e7dd      	b.n	80006cc <__udivmoddi4+0xa4>
 8000710:	b902      	cbnz	r2, 8000714 <__udivmoddi4+0xec>
 8000712:	deff      	udf	#255	; 0xff
 8000714:	fab2 f282 	clz	r2, r2
 8000718:	2a00      	cmp	r2, #0
 800071a:	f040 8092 	bne.w	8000842 <__udivmoddi4+0x21a>
 800071e:	eba1 010c 	sub.w	r1, r1, ip
 8000722:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000726:	fa1f fe8c 	uxth.w	lr, ip
 800072a:	2601      	movs	r6, #1
 800072c:	0c20      	lsrs	r0, r4, #16
 800072e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000732:	fb07 1113 	mls	r1, r7, r3, r1
 8000736:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800073a:	fb0e f003 	mul.w	r0, lr, r3
 800073e:	4288      	cmp	r0, r1
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x12c>
 8000742:	eb1c 0101 	adds.w	r1, ip, r1
 8000746:	f103 38ff 	add.w	r8, r3, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x12a>
 800074c:	4288      	cmp	r0, r1
 800074e:	f200 80cb 	bhi.w	80008e8 <__udivmoddi4+0x2c0>
 8000752:	4643      	mov	r3, r8
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	b2a4      	uxth	r4, r4
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1110 	mls	r1, r7, r0, r1
 8000760:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000764:	fb0e fe00 	mul.w	lr, lr, r0
 8000768:	45a6      	cmp	lr, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x156>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 31ff 	add.w	r1, r0, #4294967295
 8000774:	d202      	bcs.n	800077c <__udivmoddi4+0x154>
 8000776:	45a6      	cmp	lr, r4
 8000778:	f200 80bb 	bhi.w	80008f2 <__udivmoddi4+0x2ca>
 800077c:	4608      	mov	r0, r1
 800077e:	eba4 040e 	sub.w	r4, r4, lr
 8000782:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000786:	e79c      	b.n	80006c2 <__udivmoddi4+0x9a>
 8000788:	f1c6 0720 	rsb	r7, r6, #32
 800078c:	40b3      	lsls	r3, r6
 800078e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000792:	ea4c 0c03 	orr.w	ip, ip, r3
 8000796:	fa20 f407 	lsr.w	r4, r0, r7
 800079a:	fa01 f306 	lsl.w	r3, r1, r6
 800079e:	431c      	orrs	r4, r3
 80007a0:	40f9      	lsrs	r1, r7
 80007a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a6:	fa00 f306 	lsl.w	r3, r0, r6
 80007aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ae:	0c20      	lsrs	r0, r4, #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fb09 1118 	mls	r1, r9, r8, r1
 80007b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007bc:	fb08 f00e 	mul.w	r0, r8, lr
 80007c0:	4288      	cmp	r0, r1
 80007c2:	fa02 f206 	lsl.w	r2, r2, r6
 80007c6:	d90b      	bls.n	80007e0 <__udivmoddi4+0x1b8>
 80007c8:	eb1c 0101 	adds.w	r1, ip, r1
 80007cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007d0:	f080 8088 	bcs.w	80008e4 <__udivmoddi4+0x2bc>
 80007d4:	4288      	cmp	r0, r1
 80007d6:	f240 8085 	bls.w	80008e4 <__udivmoddi4+0x2bc>
 80007da:	f1a8 0802 	sub.w	r8, r8, #2
 80007de:	4461      	add	r1, ip
 80007e0:	1a09      	subs	r1, r1, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f4:	458e      	cmp	lr, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x1e2>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000800:	d26c      	bcs.n	80008dc <__udivmoddi4+0x2b4>
 8000802:	458e      	cmp	lr, r1
 8000804:	d96a      	bls.n	80008dc <__udivmoddi4+0x2b4>
 8000806:	3802      	subs	r0, #2
 8000808:	4461      	add	r1, ip
 800080a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080e:	fba0 9402 	umull	r9, r4, r0, r2
 8000812:	eba1 010e 	sub.w	r1, r1, lr
 8000816:	42a1      	cmp	r1, r4
 8000818:	46c8      	mov	r8, r9
 800081a:	46a6      	mov	lr, r4
 800081c:	d356      	bcc.n	80008cc <__udivmoddi4+0x2a4>
 800081e:	d053      	beq.n	80008c8 <__udivmoddi4+0x2a0>
 8000820:	b15d      	cbz	r5, 800083a <__udivmoddi4+0x212>
 8000822:	ebb3 0208 	subs.w	r2, r3, r8
 8000826:	eb61 010e 	sbc.w	r1, r1, lr
 800082a:	fa01 f707 	lsl.w	r7, r1, r7
 800082e:	fa22 f306 	lsr.w	r3, r2, r6
 8000832:	40f1      	lsrs	r1, r6
 8000834:	431f      	orrs	r7, r3
 8000836:	e9c5 7100 	strd	r7, r1, [r5]
 800083a:	2600      	movs	r6, #0
 800083c:	4631      	mov	r1, r6
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	40d8      	lsrs	r0, r3
 8000848:	fa0c fc02 	lsl.w	ip, ip, r2
 800084c:	fa21 f303 	lsr.w	r3, r1, r3
 8000850:	4091      	lsls	r1, r2
 8000852:	4301      	orrs	r1, r0
 8000854:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000858:	fa1f fe8c 	uxth.w	lr, ip
 800085c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000860:	fb07 3610 	mls	r6, r7, r0, r3
 8000864:	0c0b      	lsrs	r3, r1, #16
 8000866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800086a:	fb00 f60e 	mul.w	r6, r0, lr
 800086e:	429e      	cmp	r6, r3
 8000870:	fa04 f402 	lsl.w	r4, r4, r2
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x260>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 38ff 	add.w	r8, r0, #4294967295
 800087e:	d22f      	bcs.n	80008e0 <__udivmoddi4+0x2b8>
 8000880:	429e      	cmp	r6, r3
 8000882:	d92d      	bls.n	80008e0 <__udivmoddi4+0x2b8>
 8000884:	3802      	subs	r0, #2
 8000886:	4463      	add	r3, ip
 8000888:	1b9b      	subs	r3, r3, r6
 800088a:	b289      	uxth	r1, r1
 800088c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000890:	fb07 3316 	mls	r3, r7, r6, r3
 8000894:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000898:	fb06 f30e 	mul.w	r3, r6, lr
 800089c:	428b      	cmp	r3, r1
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x28a>
 80008a0:	eb1c 0101 	adds.w	r1, ip, r1
 80008a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a8:	d216      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d914      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 80008ae:	3e02      	subs	r6, #2
 80008b0:	4461      	add	r1, ip
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b8:	e738      	b.n	800072c <__udivmoddi4+0x104>
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e705      	b.n	80006cc <__udivmoddi4+0xa4>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e3      	b.n	800068c <__udivmoddi4+0x64>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6f8      	b.n	80006ba <__udivmoddi4+0x92>
 80008c8:	454b      	cmp	r3, r9
 80008ca:	d2a9      	bcs.n	8000820 <__udivmoddi4+0x1f8>
 80008cc:	ebb9 0802 	subs.w	r8, r9, r2
 80008d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7a3      	b.n	8000820 <__udivmoddi4+0x1f8>
 80008d8:	4646      	mov	r6, r8
 80008da:	e7ea      	b.n	80008b2 <__udivmoddi4+0x28a>
 80008dc:	4620      	mov	r0, r4
 80008de:	e794      	b.n	800080a <__udivmoddi4+0x1e2>
 80008e0:	4640      	mov	r0, r8
 80008e2:	e7d1      	b.n	8000888 <__udivmoddi4+0x260>
 80008e4:	46d0      	mov	r8, sl
 80008e6:	e77b      	b.n	80007e0 <__udivmoddi4+0x1b8>
 80008e8:	3b02      	subs	r3, #2
 80008ea:	4461      	add	r1, ip
 80008ec:	e732      	b.n	8000754 <__udivmoddi4+0x12c>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e709      	b.n	8000706 <__udivmoddi4+0xde>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	e742      	b.n	800077e <__udivmoddi4+0x156>

080008f8 <__aeabi_idiv0>:
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000904:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000908:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d013      	beq.n	800093c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000914:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000918:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800091c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00b      	beq.n	800093c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000924:	e000      	b.n	8000928 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000926:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000928:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f9      	beq.n	8000926 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000932:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 fe37 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f8bd 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 fad3 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 800095e:	f000 fab1 	bl	8000ec4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000962:	f000 fa85 	bl	8000e70 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000966:	f000 fa2f 	bl	8000dc8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800096a:	f000 f9bd 	bl	8000ce8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800096e:	f000 f91b 	bl	8000ba8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  	  HAL_TIM_Base_Start(&htim1);
 8000972:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <main+0x154>)
 8000974:	f002 f91a 	bl	8002bac <HAL_TIM_Base_Start>
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000978:	2100      	movs	r1, #0
 800097a:	4849      	ldr	r0, [pc, #292]	; (8000aa0 <main+0x154>)
 800097c:	f002 f9ca 	bl	8002d14 <HAL_TIM_PWM_Start>
  	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000980:	2104      	movs	r1, #4
 8000982:	4848      	ldr	r0, [pc, #288]	; (8000aa4 <main+0x158>)
 8000984:	f002 fb75 	bl	8003072 <HAL_TIM_Encoder_Start>

  	  PID.Kp = 0.1;
 8000988:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <main+0x15c>)
 800098a:	4a48      	ldr	r2, [pc, #288]	; (8000aac <main+0x160>)
 800098c:	619a      	str	r2, [r3, #24]
  	  PID.Ki = 0.00001;
 800098e:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <main+0x15c>)
 8000990:	4a47      	ldr	r2, [pc, #284]	; (8000ab0 <main+0x164>)
 8000992:	61da      	str	r2, [r3, #28]
  	  PID.Kd = 0.1;
 8000994:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <main+0x15c>)
 8000996:	4a45      	ldr	r2, [pc, #276]	; (8000aac <main+0x160>)
 8000998:	621a      	str	r2, [r3, #32]
  	  arm_pid_init_f32(&PID,0);
 800099a:	2100      	movs	r1, #0
 800099c:	4842      	ldr	r0, [pc, #264]	; (8000aa8 <main+0x15c>)
 800099e:	f000 fdda 	bl	8001556 <arm_pid_init_f32>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  static uint32_t timestamp = 0;
	  if(HAL_GetTick() > timestamp)
 80009a2:	f000 fe75 	bl	8001690 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <main+0x168>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d9f8      	bls.n	80009a2 <main+0x56>
	  {
		  timestamp = HAL_GetTick() + 50;
 80009b0:	f000 fe6e 	bl	8001690 <HAL_GetTick>
 80009b4:	4603      	mov	r3, r0
 80009b6:	3332      	adds	r3, #50	; 0x32
 80009b8:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <main+0x168>)
 80009ba:	6013      	str	r3, [r2, #0]
		  QEIReadPosition = __HAL_TIM_GET_COUNTER(&htim3);
 80009bc:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <main+0x158>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	4a3d      	ldr	r2, [pc, #244]	; (8000ab8 <main+0x16c>)
 80009c4:	6013      	str	r3, [r2, #0]
		  // printf("Position = %ld\n", QEIReadPosition);
		  BITtoRadius = (QEIReadPosition*360)/3072;
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <main+0x16c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	4a3a      	ldr	r2, [pc, #232]	; (8000abc <main+0x170>)
 80009d4:	fba2 2303 	umull	r2, r3, r2, r3
 80009d8:	0adb      	lsrs	r3, r3, #11
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <main+0x174>)
 80009e4:	edc3 7a00 	vstr	s15, [r3]

		  Vfeedback = arm_pid_f32(&PID,setposition - BITtoRadius);
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <main+0x178>)
 80009ea:	ed93 7a00 	vldr	s14, [r3]
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <main+0x174>)
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <main+0x15c>)
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	ed93 7a00 	vldr	s14, [r3]
 8000a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	edd3 6a01 	vldr	s13, [r3, #4]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	edd3 6a02 	vldr	s13, [r3, #8]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a40:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <main+0x17c>)
 8000a5c:	6013      	str	r3, [r2, #0]
		  duty = dutyset(Vfeedback);
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <main+0x17c>)
 8000a60:	edd3 7a00 	vldr	s15, [r3]
 8000a64:	eeb0 0a67 	vmov.f32	s0, s15
 8000a68:	f000 fad6 	bl	8001018 <dutyset>
 8000a6c:	eef0 7a40 	vmov.f32	s15, s0
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <main+0x180>)
 8000a72:	edc3 7a00 	vstr	s15, [r3]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,duty);
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <main+0x180>)
 8000a78:	edd3 7a00 	vldr	s15, [r3]
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <main+0x154>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a84:	ee17 2a90 	vmov	r2, s15
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
		  printf("Radius = %ld\n", BITtoRadius);
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <main+0x174>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd5a 	bl	8000548 <__aeabi_f2d>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <main+0x184>)
 8000a9a:	f003 fd3d 	bl	8004518 <iprintf>
  {
 8000a9e:	e780      	b.n	80009a2 <main+0x56>
 8000aa0:	20000090 	.word	0x20000090
 8000aa4:	20000120 	.word	0x20000120
 8000aa8:	20000210 	.word	0x20000210
 8000aac:	3dcccccd 	.word	0x3dcccccd
 8000ab0:	3727c5ac 	.word	0x3727c5ac
 8000ab4:	20000240 	.word	0x20000240
 8000ab8:	2000020c 	.word	0x2000020c
 8000abc:	aaaaaaab 	.word	0xaaaaaaab
 8000ac0:	20000234 	.word	0x20000234
 8000ac4:	20000238 	.word	0x20000238
 8000ac8:	2000023c 	.word	0x2000023c
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	0800544c 	.word	0x0800544c

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2230      	movs	r2, #48	; 0x30
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fd10 	bl	8004508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <SystemClock_Config+0xcc>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <SystemClock_Config+0xcc>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <SystemClock_Config+0xcc>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <SystemClock_Config+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <SystemClock_Config+0xd0>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <SystemClock_Config+0xd0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b44:	2310      	movs	r3, #16
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b52:	2304      	movs	r3, #4
 8000b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fb3e 	bl	80021dc <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b66:	f000 fa77 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2102      	movs	r1, #2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fda0 	bl	80026cc <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b92:	f000 fa61 	bl	8001058 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3750      	adds	r7, #80	; 0x50
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fc91 	bl	8004508 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be6:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000be8:	4a3e      	ldr	r2, [pc, #248]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000bec:	4b3c      	ldr	r3, [pc, #240]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000bee:	2253      	movs	r2, #83	; 0x53
 8000bf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000bf8:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c12:	4833      	ldr	r0, [pc, #204]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c14:	f001 ff7a 	bl	8002b0c <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c1e:	f000 fa1b 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482c      	ldr	r0, [pc, #176]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c30:	f002 fc0c 	bl	800344c <HAL_TIM_ConfigClockSource>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c3a:	f000 fa0d 	bl	8001058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3e:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c40:	f002 f80e 	bl	8002c60 <HAL_TIM_PWM_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c4a:	f000 fa05 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c5e:	f003 f8a7 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c68:	f000 f9f6 	bl	8001058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6c:	2360      	movs	r3, #96	; 0x60
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000c92:	f002 fb19 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c9c:	f000 f9dc 	bl	8001058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000cc4:	f003 f8e2 	bl	8003e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000cce:	f000 f9c3 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM1_Init+0x138>)
 8000cd4:	f000 fac6 	bl	8001264 <HAL_TIM_MspPostInit>

}
 8000cd8:	bf00      	nop
 8000cda:	3758      	adds	r7, #88	; 0x58
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d1c:	2253      	movs	r2, #83	; 0x53
 8000d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d3a:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d3c:	f001 fee6 	bl	8002b0c <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000d46:	f000 f987 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4619      	mov	r1, r3
 8000d56:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d58:	f002 fb78 	bl	800344c <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d62:	f000 f979 	bl	8001058 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d66:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d68:	f002 f884 	bl	8002e74 <HAL_TIM_IC_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d72:	f000 f971 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000d86:	f003 f813 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000d90:	f000 f962 	bl	8001058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d94:	2300      	movs	r3, #0
 8000d96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM2_Init+0xdc>)
 8000dac:	f002 f9ef 	bl	800318e <HAL_TIM_IC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000db6:	f000 f94f 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000d8 	.word	0x200000d8

08000dc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2224      	movs	r2, #36	; 0x24
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fb96 	bl	8004508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_TIM3_Init+0xa4>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000df8:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e22:	2301      	movs	r3, #1
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e36:	f002 f876 	bl	8002f26 <HAL_TIM_Encoder_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 f90a 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e52:	f002 ffad 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e5c:	f000 f8fc 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000120 	.word	0x20000120
 8000e6c:	40000400 	.word	0x40000400

08000e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f003 f842 	bl	8003f30 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f8d1 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001c8 	.word	0x200001c8
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2010      	movs	r0, #16
 8000eec:	f000 fcb7 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ef0:	2010      	movs	r0, #16
 8000ef2:	f000 fcd0 	bl	8001896 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_GPIO_Init+0xd0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000f90:	f001 f90a 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_GPIO_Init+0xd8>)
 8000fac:	f000 ff78 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_GPIO_Init+0xd4>)
 8000fc8:	f000 ff6a 	bl	8001ea0 <HAL_GPIO_Init>

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <_write>:

/* USER CODE BEGIN 4 */
/*re-implement _write function of printf*/
int _write(int file,char *ptr,int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	int i ;

	for(i = 0;i<len;i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e009      	b.n	8001006 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc7e 	bl	80008fc <ITM_SendChar>
	for(i = 0;i<len;i++)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbf1      	blt.n	8000ff2 <_write+0x12>
	}
	return len;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <dutyset>:

float dutyset(float VIn)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty = 0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
//	{
//		duty = 0;
//	}
//	else
//	{
	duty = (VIn * 1000)/5;
 8001028:	edd7 7a01 	vldr	s15, [r7, #4]
 800102c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001054 <dutyset+0x3c>
 8001030:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001034:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	edc7 7a03 	vstr	s15, [r7, #12]
//	}
	return duty;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	ee07 3a90 	vmov	s15, r3

}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	447a0000 	.word	0x447a0000

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_MspInit+0x4c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 fbd0 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <HAL_TIM_Base_MspInit+0x10c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10e      	bne.n	80010f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a39      	ldr	r2, [pc, #228]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f2:	e061      	b.n	80011b8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	d15c      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	481d      	ldr	r0, [pc, #116]	; (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 8001152:	f000 fea5 	bl	8001ea0 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_TIM_Base_MspInit+0x11c>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 800115e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001162:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 8001172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001176:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 800117a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800117e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 8001182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001186:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 800118a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 8001192:	2200      	movs	r2, #0
 8001194:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 800119e:	f000 fb95 	bl	80018cc <HAL_DMA_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 80011a8:	f7ff ff56 	bl	8001058 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_TIM_Base_MspInit+0x118>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	20000168 	.word	0x20000168
 80011d0:	40026088 	.word	0x40026088

080011d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_TIM_Encoder_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_TIM_Encoder_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_TIM_Encoder_MspInit+0x88>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_TIM_Encoder_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_TIM_Encoder_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_TIM_Encoder_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_TIM_Encoder_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800122e:	23c0      	movs	r3, #192	; 0xc0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800123e:	2302      	movs	r3, #2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_TIM_Encoder_MspInit+0x8c>)
 800124a:	f000 fe29 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40000400 	.word	0x40000400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_TIM_MspPostInit+0x68>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d11e      	bne.n	80012c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_TIM_MspPostInit+0x6c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_TIM_MspPostInit+0x70>)
 80012c0:	f000 fdee 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_UART_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12b      	bne.n	8001352 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_UART_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001332:	230c      	movs	r3, #12
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001342:	2307      	movs	r3, #7
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_MspInit+0x8c>)
 800134e:	f000 fda7 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40004400 	.word	0x40004400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f958 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA1_Stream5_IRQHandler+0x10>)
 80013c2:	f000 fb31 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000168 	.word	0x20000168

080013d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
  }

  return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_close>:
  }
  return len;
}

int _close(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	605a      	str	r2, [r3, #4]
  return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_isatty>:

int _isatty(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f003 f806 	bl	80044b4 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20020000 	.word	0x20020000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000244 	.word	0x20000244
 80014dc:	20000260 	.word	0x20000260

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800153c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150a:	490e      	ldr	r1, [pc, #56]	; (8001544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001520:	4c0b      	ldr	r4, [pc, #44]	; (8001550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152e:	f7ff ffd7 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f002 ffc5 	bl	80044c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff fa09 	bl	800094c <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800153c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001548:	08005524 	.word	0x08005524
  ldr r2, =_sbss
 800154c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001550:	2000025c 	.word	0x2000025c

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>

08001556 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ed93 7a06 	vldr	s14, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a07 	vldr	s15, [r3, #28]
 800156c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a08 	vldr	s15, [r3, #32]
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a06 	vldr	s15, [r3, #24]
 8001586:	eeb1 7a67 	vneg.f32	s14, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001590:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	330c      	adds	r3, #12
 80015b0:	220c      	movs	r2, #12
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 ffa7 	bl	8004508 <memset>
  }

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f92b 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fd34 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f943 	bl	80018b2 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f90b 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000004 	.word	0x20000004
 8001660:	2000000c 	.word	0x2000000c
 8001664:	20000008 	.word	0x20000008

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20000248 	.word	0x20000248

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000248 	.word	0x20000248

080016a8 <__NVIC_SetPriorityGrouping>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff3e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff31 	bl	800170c <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff feda 	bl	8001690 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e099      	b.n	8001a1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001908:	e00f      	b.n	800192a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800190a:	f7ff fec1 	bl	8001690 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b05      	cmp	r3, #5
 8001916:	d908      	bls.n	800192a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e078      	b.n	8001a1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e8      	bne.n	800190a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_DMA_Init+0x158>)
 8001944:	4013      	ands	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2b04      	cmp	r3, #4
 8001982:	d107      	bne.n	8001994 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4313      	orrs	r3, r2
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d117      	bne.n	80019ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f9e9 	bl	8001da8 <DMA_CheckFifoParam>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ea:	2301      	movs	r3, #1
 80019ec:	e016      	b.n	8001a1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f9a0 	bl	8001d3c <DMA_CalcBaseAndBitshift>
 80019fc:	4603      	mov	r3, r0
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	223f      	movs	r2, #63	; 0x3f
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	f010803f 	.word	0xf010803f

08001a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a34:	4b8e      	ldr	r3, [pc, #568]	; (8001c70 <HAL_DMA_IRQHandler+0x248>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a8e      	ldr	r2, [pc, #568]	; (8001c74 <HAL_DMA_IRQHandler+0x24c>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	2208      	movs	r2, #8
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0204 	bic.w	r2, r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2208      	movs	r2, #8
 8001a82:	409a      	lsls	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d012      	beq.n	8001aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0202 	orr.w	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2204      	movs	r2, #4
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d012      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2204      	movs	r2, #4
 8001aee:	409a      	lsls	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f043 0204 	orr.w	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2210      	movs	r2, #16
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d043      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d03c      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	2210      	movs	r2, #16
 8001b24:	409a      	lsls	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d024      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
 8001b56:	e01f      	b.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e016      	b.n	8001b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0208 	bic.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 808f 	beq.w	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8087 	beq.w	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d136      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0216 	bic.w	r2, r2, #22
 8001be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x1da>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	223f      	movs	r2, #63	; 0x3f
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d07e      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
        }
        return;
 8001c3e:	e079      	b.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01d      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d031      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e02c      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
 8001c6e:	bf00      	nop
 8001c70:	20000004 	.word	0x20000004
 8001c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d023      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
 8001c88:	e01e      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10f      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0210 	bic.w	r2, r2, #16
 8001ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d032      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d022      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2205      	movs	r2, #5
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d307      	bcc.n	8001d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f2      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x2cc>
 8001d0e:	e000      	b.n	8001d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
 8001d32:	e000      	b.n	8001d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d34:	bf00      	nop
    }
  }
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b10      	subs	r3, #16
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d909      	bls.n	8001d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	1d1a      	adds	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d7c:	e007      	b.n	8001d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	aaaaaaab 	.word	0xaaaaaaab
 8001da4:	08005474 	.word	0x08005474

08001da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11f      	bne.n	8001e02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d856      	bhi.n	8001e76 <DMA_CheckFifoParam+0xce>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <DMA_CheckFifoParam+0x28>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001df3 	.word	0x08001df3
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001e77 	.word	0x08001e77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d046      	beq.n	8001e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df0:	e043      	b.n	8001e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dfa:	d140      	bne.n	8001e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e00:	e03d      	b.n	8001e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0a:	d121      	bne.n	8001e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d837      	bhi.n	8001e82 <DMA_CheckFifoParam+0xda>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <DMA_CheckFifoParam+0x70>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e2f 	.word	0x08001e2f
 8001e20:	08001e29 	.word	0x08001e29
 8001e24:	08001e41 	.word	0x08001e41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2c:	e030      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d025      	beq.n	8001e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3e:	e022      	b.n	8001e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e48:	d11f      	bne.n	8001e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e4e:	e01c      	b.n	8001e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d903      	bls.n	8001e5e <DMA_CheckFifoParam+0xb6>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d003      	beq.n	8001e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e5c:	e018      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
      break;
 8001e62:	e015      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      break;
 8001e74:	e00b      	b.n	8001e8e <DMA_CheckFifoParam+0xe6>
      break;
 8001e76:	bf00      	nop
 8001e78:	e00a      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e008      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e006      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e004      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e86:	bf00      	nop
 8001e88:	e002      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e159      	b.n	8002170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8148 	bne.w	800216a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a2 	beq.w	800216a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_GPIO_Init+0x2e8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a56      	ldr	r2, [pc, #344]	; (8002188 <HAL_GPIO_Init+0x2e8>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x2e8>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x2ec>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a49      	ldr	r2, [pc, #292]	; (8002190 <HAL_GPIO_Init+0x2f0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x202>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a48      	ldr	r2, [pc, #288]	; (8002194 <HAL_GPIO_Init+0x2f4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x1fe>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a47      	ldr	r2, [pc, #284]	; (8002198 <HAL_GPIO_Init+0x2f8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x1fa>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a46      	ldr	r2, [pc, #280]	; (800219c <HAL_GPIO_Init+0x2fc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x1f6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a45      	ldr	r2, [pc, #276]	; (80021a0 <HAL_GPIO_Init+0x300>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x1f2>
 800208e:	2304      	movs	r3, #4
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 8002092:	2307      	movs	r3, #7
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	; (800218c <HAL_GPIO_Init+0x2ec>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_GPIO_Init+0x304>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f aea2 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e267      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d075      	beq.n	80022e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00c      	beq.n	8002220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	2b08      	cmp	r3, #8
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b82      	ldr	r3, [pc, #520]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b7e      	ldr	r3, [pc, #504]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d157      	bne.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e242      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x74>
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a75      	ldr	r2, [pc, #468]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x98>
 800225a:	4b70      	ldr	r3, [pc, #448]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6f      	ldr	r2, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6d      	ldr	r3, [pc, #436]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6c      	ldr	r2, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002274:	4b69      	ldr	r3, [pc, #420]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a68      	ldr	r2, [pc, #416]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a65      	ldr	r2, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff f9fc 	bl	8001690 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff f9f8 	bl	8001690 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e207      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5b      	ldr	r3, [pc, #364]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xc0>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff f9e8 	bl	8001690 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff f9e4 	bl	8001690 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1f3      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c7      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4937      	ldr	r1, [pc, #220]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x244>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7ff f99d 	bl	8001690 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff f999 	bl	8001690 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a8      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4925      	ldr	r1, [pc, #148]	; (800241c <HAL_RCC_OscConfig+0x240>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x244>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f97c 	bl	8001690 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff f978 	bl	8001690 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e187      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d036      	beq.n	8002434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_RCC_OscConfig+0x248>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff f95c 	bl	8001690 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f958 	bl	8001690 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e167      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x240>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x200>
 80023fa:	e01b      	b.n	8002434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_OscConfig+0x248>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff f945 	bl	8001690 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	e00e      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240a:	f7ff f941 	bl	8001690 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d907      	bls.n	8002428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e150      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
 800241c:	40023800 	.word	0x40023800
 8002420:	42470000 	.word	0x42470000
 8002424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ea      	bne.n	800240a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8097 	beq.w	8002570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10f      	bne.n	8002472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b7d      	ldr	r3, [pc, #500]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a7c      	ldr	r2, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b7a      	ldr	r3, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b77      	ldr	r3, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b74      	ldr	r3, [pc, #464]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a73      	ldr	r2, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff f901 	bl	8001690 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff f8fd 	bl	8001690 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e10c      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x474>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x2ea>
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a63      	ldr	r2, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x324>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x30c>
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a5e      	ldr	r2, [pc, #376]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x324>
 80024e8:	4b58      	ldr	r3, [pc, #352]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a57      	ldr	r2, [pc, #348]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a54      	ldr	r2, [pc, #336]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7ff f8c2 	bl	8001690 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7ff f8be 	bl	8001690 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0cb      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	4b49      	ldr	r3, [pc, #292]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <HAL_RCC_OscConfig+0x334>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7ff f8ac 	bl	8001690 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7ff f8a8 	bl	8001690 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0b5      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ee      	bne.n	800253c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	4a38      	ldr	r2, [pc, #224]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a1 	beq.w	80026bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x470>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b08      	cmp	r3, #8
 8002584:	d05c      	beq.n	8002640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d141      	bne.n	8002612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_OscConfig+0x478>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff f87c 	bl	8001690 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff f878 	bl	8001690 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e087      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	3b01      	subs	r3, #1
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	491b      	ldr	r1, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x470>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x478>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff f851 	bl	8001690 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7ff f84d 	bl	8001690 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e05c      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x416>
 8002610:	e054      	b.n	80026bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x478>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff f83a 	bl	8001690 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f836 	bl	8001690 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e045      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x470>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x444>
 800263e:	e03d      	b.n	80026bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e038      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000
 8002654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4ec>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d028      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d121      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d11a      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002690:	4293      	cmp	r3, r2
 8002692:	d111      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0cc      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d90c      	bls.n	8002708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0b8      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d044      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d119      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e067      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4934      	ldr	r1, [pc, #208]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7fe ff68 	bl	8001690 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7fe ff64 	bl	8001690 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e04f      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d20c      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e032      	b.n	800287a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002852:	f000 f821 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490a      	ldr	r1, [pc, #40]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fec8 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023c00 	.word	0x40023c00
 8002888:	40023800 	.word	0x40023800
 800288c:	0800545c 	.word	0x0800545c
 8002890:	20000004 	.word	0x20000004
 8002894:	20000008 	.word	0x20000008

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b094      	sub	sp, #80	; 0x50
 800289e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	647b      	str	r3, [r7, #68]	; 0x44
 80028a4:	2300      	movs	r3, #0
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a8:	2300      	movs	r3, #0
 80028aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b0:	4b79      	ldr	r3, [pc, #484]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d00d      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x40>
 80028bc:	2b08      	cmp	r3, #8
 80028be:	f200 80e1 	bhi.w	8002a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x34>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ca:	e0db      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80028ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028d0:	e0db      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028d6:	e0d8      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d8:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e2:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ee:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	2200      	movs	r2, #0
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
 8002906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800290a:	4622      	mov	r2, r4
 800290c:	462b      	mov	r3, r5
 800290e:	f04f 0000 	mov.w	r0, #0
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	0159      	lsls	r1, r3, #5
 8002918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291c:	0150      	lsls	r0, r2, #5
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4621      	mov	r1, r4
 8002924:	1a51      	subs	r1, r2, r1
 8002926:	6139      	str	r1, [r7, #16]
 8002928:	4629      	mov	r1, r5
 800292a:	eb63 0301 	sbc.w	r3, r3, r1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800293c:	4659      	mov	r1, fp
 800293e:	018b      	lsls	r3, r1, #6
 8002940:	4651      	mov	r1, sl
 8002942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002946:	4651      	mov	r1, sl
 8002948:	018a      	lsls	r2, r1, #6
 800294a:	4651      	mov	r1, sl
 800294c:	ebb2 0801 	subs.w	r8, r2, r1
 8002950:	4659      	mov	r1, fp
 8002952:	eb63 0901 	sbc.w	r9, r3, r1
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	4623      	mov	r3, r4
 8002970:	eb18 0303 	adds.w	r3, r8, r3
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	462b      	mov	r3, r5
 8002978:	eb49 0303 	adc.w	r3, r9, r3
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800298a:	4629      	mov	r1, r5
 800298c:	024b      	lsls	r3, r1, #9
 800298e:	4621      	mov	r1, r4
 8002990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002994:	4621      	mov	r1, r4
 8002996:	024a      	lsls	r2, r1, #9
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299e:	2200      	movs	r2, #0
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029a8:	f7fd fe26 	bl	80005f8 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4613      	mov	r3, r2
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b4:	e058      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	2200      	movs	r2, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	4611      	mov	r1, r2
 80029c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
 80029cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0159      	lsls	r1, r3, #5
 80029de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e2:	0150      	lsls	r0, r2, #5
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4641      	mov	r1, r8
 80029ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a08:	ebb2 040a 	subs.w	r4, r2, sl
 8002a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	00eb      	lsls	r3, r5, #3
 8002a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1e:	00e2      	lsls	r2, r4, #3
 8002a20:	4614      	mov	r4, r2
 8002a22:	461d      	mov	r5, r3
 8002a24:	4643      	mov	r3, r8
 8002a26:	18e3      	adds	r3, r4, r3
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	eb45 0303 	adc.w	r3, r5, r3
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3e:	4629      	mov	r1, r5
 8002a40:	028b      	lsls	r3, r1, #10
 8002a42:	4621      	mov	r1, r4
 8002a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a48:	4621      	mov	r1, r4
 8002a4a:	028a      	lsls	r2, r1, #10
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a52:	2200      	movs	r2, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	61fa      	str	r2, [r7, #28]
 8002a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5c:	f7fd fdcc 	bl	80005f8 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3750      	adds	r7, #80	; 0x50
 8002a90:	46bd      	mov	sp, r7
 8002a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	0800546c 	.word	0x0800546c

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae8:	f7ff ffdc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0b5b      	lsrs	r3, r3, #13
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	0800546c 	.word	0x0800546c

08002b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e041      	b.n	8002ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fabe 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 fd46 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d001      	beq.n	8002bc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e03c      	b.n	8002c3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <HAL_TIM_Base_Start+0xa0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d018      	beq.n	8002c08 <HAL_TIM_Base_Start+0x5c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d013      	beq.n	8002c08 <HAL_TIM_Base_Start+0x5c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_TIM_Base_Start+0xa4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00e      	beq.n	8002c08 <HAL_TIM_Base_Start+0x5c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_TIM_Base_Start+0xa8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_TIM_Base_Start+0x5c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_TIM_Base_Start+0xac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIM_Base_Start+0x5c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_TIM_Base_Start+0xb0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d111      	bne.n	8002c2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d010      	beq.n	8002c3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2a:	e007      	b.n	8002c3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40014000 	.word	0x40014000

08002c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e041      	b.n	8002cf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f839 	bl	8002cfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fc9c 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_TIM_PWM_Start+0x24>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e022      	b.n	8002d7e <HAL_TIM_PWM_Start+0x6a>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d109      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x3e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e015      	b.n	8002d7e <HAL_TIM_PWM_Start+0x6a>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x58>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e008      	b.n	8002d7e <HAL_TIM_PWM_Start+0x6a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e068      	b.n	8002e58 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x82>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d94:	e013      	b.n	8002dbe <HAL_TIM_PWM_Start+0xaa>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x92>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da4:	e00b      	b.n	8002dbe <HAL_TIM_PWM_Start+0xaa>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PWM_Start+0xa2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	e003      	b.n	8002dbe <HAL_TIM_PWM_Start+0xaa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 ffcc 	bl	8003d64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a23      	ldr	r2, [pc, #140]	; (8002e60 <HAL_TIM_PWM_Start+0x14c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d107      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_TIM_PWM_Start+0x14c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x10e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d013      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x10e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_TIM_PWM_Start+0x150>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x10e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_TIM_PWM_Start+0x154>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x10e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_TIM_PWM_Start+0x158>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x10e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_TIM_PWM_Start+0x15c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d010      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e44:	e007      	b.n	8002e56 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f839 	bl	8002f12 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fb92 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e097      	b.n	800306a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f940 	bl	80011d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fb2e 	bl	80035dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa8:	f023 0303 	bic.w	r3, r3, #3
 8002fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fc6:	f023 030c 	bic.w	r3, r3, #12
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	011a      	lsls	r2, r3, #4
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	031b      	lsls	r3, r3, #12
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003004:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800300c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	4313      	orrs	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003082:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800308a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003092:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800309a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d110      	bne.n	80030c4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d102      	bne.n	80030ae <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030a8:	7b7b      	ldrb	r3, [r7, #13]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d001      	beq.n	80030b2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e069      	b.n	8003186 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c2:	e031      	b.n	8003128 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d110      	bne.n	80030ec <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ca:	7bbb      	ldrb	r3, [r7, #14]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030d0:	7b3b      	ldrb	r3, [r7, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e055      	b.n	8003186 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ea:	e01d      	b.n	8003128 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d108      	bne.n	8003104 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030f2:	7bbb      	ldrb	r3, [r7, #14]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030f8:	7b7b      	ldrb	r3, [r7, #13]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030fe:	7b3b      	ldrb	r3, [r7, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d001      	beq.n	8003108 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e03e      	b.n	8003186 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_Encoder_Start+0xc4>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d008      	beq.n	8003146 <HAL_TIM_Encoder_Start+0xd4>
 8003134:	e00f      	b.n	8003156 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe10 	bl	8003d64 <TIM_CCxChannelCmd>
      break;
 8003144:	e016      	b.n	8003174 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	2104      	movs	r1, #4
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fe08 	bl	8003d64 <TIM_CCxChannelCmd>
      break;
 8003154:	e00e      	b.n	8003174 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fe00 	bl	8003d64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	2104      	movs	r1, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fdf9 	bl	8003d64 <TIM_CCxChannelCmd>
      break;
 8003172:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e088      	b.n	80032be <HAL_TIM_IC_ConfigChannel+0x130>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11b      	bne.n	80031f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f000 fc13 	bl	80039f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 020c 	bic.w	r2, r2, #12
 80031dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6999      	ldr	r1, [r3, #24]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
 80031f0:	e060      	b.n	80032b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d11c      	bne.n	8003232 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f000 fc8b 	bl	8003b22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800321a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6999      	ldr	r1, [r3, #24]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	021a      	lsls	r2, r3, #8
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	e040      	b.n	80032b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f000 fcd8 	bl	8003bfc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020c 	bic.w	r2, r2, #12
 800325a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69d9      	ldr	r1, [r3, #28]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	61da      	str	r2, [r3, #28]
 800326e:	e021      	b.n	80032b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d11c      	bne.n	80032b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f000 fcf5 	bl	8003c74 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003298:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69d9      	ldr	r1, [r3, #28]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	021a      	lsls	r2, r3, #8
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	61da      	str	r2, [r3, #28]
 80032ae:	e001      	b.n	80032b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0ae      	b.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	f200 809f 	bhi.w	8003434 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003435 	.word	0x08003435
 8003304:	08003435 	.word	0x08003435
 8003308:	08003435 	.word	0x08003435
 800330c:	08003371 	.word	0x08003371
 8003310:	08003435 	.word	0x08003435
 8003314:	08003435 	.word	0x08003435
 8003318:	08003435 	.word	0x08003435
 800331c:	080033b3 	.word	0x080033b3
 8003320:	08003435 	.word	0x08003435
 8003324:	08003435 	.word	0x08003435
 8003328:	08003435 	.word	0x08003435
 800332c:	080033f3 	.word	0x080033f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f9d0 	bl	80036dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
      break;
 800336e:	e064      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa16 	bl	80037a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	021a      	lsls	r2, r3, #8
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	619a      	str	r2, [r3, #24]
      break;
 80033b0:	e043      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa61 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0208 	orr.w	r2, r2, #8
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	61da      	str	r2, [r3, #28]
      break;
 80033f0:	e023      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 faab 	bl	8003954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69d9      	ldr	r1, [r3, #28]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	021a      	lsls	r2, r3, #8
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	61da      	str	r2, [r3, #28]
      break;
 8003432:	e002      	b.n	800343a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
      break;
 8003438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIM_ConfigClockSource+0x1c>
 8003464:	2302      	movs	r3, #2
 8003466:	e0b4      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x186>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a0:	d03e      	beq.n	8003520 <HAL_TIM_ConfigClockSource+0xd4>
 80034a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a6:	f200 8087 	bhi.w	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	f000 8086 	beq.w	80035be <HAL_TIM_ConfigClockSource+0x172>
 80034b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b6:	d87f      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d01a      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0xa6>
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d87b      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d050      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x11a>
 80034c4:	2b60      	cmp	r3, #96	; 0x60
 80034c6:	d877      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d03c      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0xfa>
 80034cc:	2b50      	cmp	r3, #80	; 0x50
 80034ce:	d873      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d058      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x13a>
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d86f      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d064      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b30      	cmp	r3, #48	; 0x30
 80034de:	d86b      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d060      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d867      	bhi.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d05a      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x15a>
 80034f0:	e062      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f000 fc0f 	bl	8003d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	609a      	str	r2, [r3, #8]
      break;
 800351e:	e04f      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f000 fbf8 	bl	8003d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003542:	609a      	str	r2, [r3, #8]
      break;
 8003544:	e03c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f000 fab6 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2150      	movs	r1, #80	; 0x50
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fbc5 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003564:	e02c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 fb12 	bl	8003b9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2160      	movs	r1, #96	; 0x60
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fbb5 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003584:	e01c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fa96 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fba5 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 80035a4:	e00c      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f000 fb9c 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 80035b6:	e003      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e000      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a34      	ldr	r2, [pc, #208]	; (80036c0 <TIM_Base_SetConfig+0xe4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00f      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d00b      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <TIM_Base_SetConfig+0xe8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <TIM_Base_SetConfig+0xec>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <TIM_Base_SetConfig+0xf0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <TIM_Base_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01b      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d017      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <TIM_Base_SetConfig+0xe8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <TIM_Base_SetConfig+0xec>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a20      	ldr	r2, [pc, #128]	; (80036cc <TIM_Base_SetConfig+0xf0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <TIM_Base_SetConfig+0xf4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <TIM_Base_SetConfig+0xf8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <TIM_Base_SetConfig+0xfc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <TIM_Base_SetConfig+0xe4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d103      	bne.n	80036ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	615a      	str	r2, [r3, #20]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800

080036dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0201 	bic.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 0302 	bic.w	r3, r3, #2
 8003724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <TIM_OC1_SetConfig+0xc8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10c      	bne.n	8003752 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0308 	bic.w	r3, r3, #8
 800373e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <TIM_OC1_SetConfig+0xc8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d111      	bne.n	800377e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40010000 	.word	0x40010000

080037a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0320 	bic.w	r3, r3, #32
 80037f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <TIM_OC2_SetConfig+0xd4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10d      	bne.n	8003824 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <TIM_OC2_SetConfig+0xd4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d113      	bne.n	8003854 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <TIM_OC3_SetConfig+0xd0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <TIM_OC3_SetConfig+0xd0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d113      	bne.n	800392a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40010000 	.word	0x40010000

08003954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <TIM_OC4_SetConfig+0x9c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d109      	bne.n	80039c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000

080039f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <TIM_TI1_SetConfig+0xbc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <TIM_TI1_SetConfig+0x56>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d00f      	beq.n	8003a4a <TIM_TI1_SetConfig+0x56>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <TIM_TI1_SetConfig+0xc0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_TI1_SetConfig+0x56>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <TIM_TI1_SetConfig+0xc4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_TI1_SetConfig+0x56>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <TIM_TI1_SetConfig+0xc8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_TI1_SetConfig+0x56>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <TIM_TI1_SetConfig+0xcc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <TIM_TI1_SetConfig+0x5a>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <TIM_TI1_SetConfig+0x5c>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e003      	b.n	8003a6e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f023 030a 	bic.w	r3, r3, #10
 8003a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 030a 	and.w	r3, r3, #10
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40014000 	.word	0x40014000

08003ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 030a 	bic.w	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 0210 	bic.w	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0210 	bic.w	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	031b      	lsls	r3, r3, #12
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	621a      	str	r2, [r3, #32]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0303 	bic.w	r3, r3, #3
 8003c28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	031b      	lsls	r3, r3, #12
 8003ccc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f043 0307 	orr.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2201      	movs	r2, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	401a      	ands	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e050      	b.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d013      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10c      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40014000 	.word	0x40014000

08003e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e03d      	b.n	8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e03f      	b.n	8003fc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd f9be 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f829 	bl	8003fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b0c0      	sub	sp, #256	; 0x100
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	68d9      	ldr	r1, [r3, #12]
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	ea40 0301 	orr.w	r3, r0, r1
 8003ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	431a      	orrs	r2, r3
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	431a      	orrs	r2, r3
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004024:	f021 010c 	bic.w	r1, r1, #12
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004032:	430b      	orrs	r3, r1
 8004034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	6999      	ldr	r1, [r3, #24]
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	ea40 0301 	orr.w	r3, r0, r1
 8004052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b8f      	ldr	r3, [pc, #572]	; (8004298 <UART_SetConfig+0x2cc>)
 800405c:	429a      	cmp	r2, r3
 800405e:	d005      	beq.n	800406c <UART_SetConfig+0xa0>
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b8d      	ldr	r3, [pc, #564]	; (800429c <UART_SetConfig+0x2d0>)
 8004068:	429a      	cmp	r2, r3
 800406a:	d104      	bne.n	8004076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe fd3a 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004070:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004074:	e003      	b.n	800407e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004076:	f7fe fd21 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 800407a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004088:	f040 810c 	bne.w	80042a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800408c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004090:	2200      	movs	r2, #0
 8004092:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004096:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800409a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800409e:	4622      	mov	r2, r4
 80040a0:	462b      	mov	r3, r5
 80040a2:	1891      	adds	r1, r2, r2
 80040a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80040a6:	415b      	adcs	r3, r3
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040ae:	4621      	mov	r1, r4
 80040b0:	eb12 0801 	adds.w	r8, r2, r1
 80040b4:	4629      	mov	r1, r5
 80040b6:	eb43 0901 	adc.w	r9, r3, r1
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ce:	4690      	mov	r8, r2
 80040d0:	4699      	mov	r9, r3
 80040d2:	4623      	mov	r3, r4
 80040d4:	eb18 0303 	adds.w	r3, r8, r3
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040dc:	462b      	mov	r3, r5
 80040de:	eb49 0303 	adc.w	r3, r9, r3
 80040e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040fa:	460b      	mov	r3, r1
 80040fc:	18db      	adds	r3, r3, r3
 80040fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004100:	4613      	mov	r3, r2
 8004102:	eb42 0303 	adc.w	r3, r2, r3
 8004106:	657b      	str	r3, [r7, #84]	; 0x54
 8004108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800410c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004110:	f7fc fa72 	bl	80005f8 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <UART_SetConfig+0x2d4>)
 800411a:	fba3 2302 	umull	r2, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	011c      	lsls	r4, r3, #4
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800412c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	64b9      	str	r1, [r7, #72]	; 0x48
 800413c:	415b      	adcs	r3, r3
 800413e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004144:	4641      	mov	r1, r8
 8004146:	eb12 0a01 	adds.w	sl, r2, r1
 800414a:	4649      	mov	r1, r9
 800414c:	eb43 0b01 	adc.w	fp, r3, r1
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800415c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004164:	4692      	mov	sl, r2
 8004166:	469b      	mov	fp, r3
 8004168:	4643      	mov	r3, r8
 800416a:	eb1a 0303 	adds.w	r3, sl, r3
 800416e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004172:	464b      	mov	r3, r9
 8004174:	eb4b 0303 	adc.w	r3, fp, r3
 8004178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004188:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800418c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004190:	460b      	mov	r3, r1
 8004192:	18db      	adds	r3, r3, r3
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
 8004196:	4613      	mov	r3, r2
 8004198:	eb42 0303 	adc.w	r3, r2, r3
 800419c:	647b      	str	r3, [r7, #68]	; 0x44
 800419e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041a6:	f7fc fa27 	bl	80005f8 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <UART_SetConfig+0x2d4>)
 80041b2:	fba3 2301 	umull	r2, r3, r3, r1
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2264      	movs	r2, #100	; 0x64
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	1acb      	subs	r3, r1, r3
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041c6:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <UART_SetConfig+0x2d4>)
 80041c8:	fba3 2302 	umull	r2, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041d4:	441c      	add	r4, r3
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80041f0:	415b      	adcs	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	6339      	str	r1, [r7, #48]	; 0x30
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800422c:	464b      	mov	r3, r9
 800422e:	460a      	mov	r2, r1
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004244:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800424c:	460b      	mov	r3, r1
 800424e:	18db      	adds	r3, r3, r3
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
 8004252:	4613      	mov	r3, r2
 8004254:	eb42 0303 	adc.w	r3, r2, r3
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800425e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004262:	f7fc f9c9 	bl	80005f8 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <UART_SetConfig+0x2d4>)
 800426c:	fba3 1302 	umull	r1, r3, r3, r2
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	2164      	movs	r1, #100	; 0x64
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	3332      	adds	r3, #50	; 0x32
 800427e:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <UART_SetConfig+0x2d4>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4422      	add	r2, r4
 8004292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004294:	e105      	b.n	80044a2 <UART_SetConfig+0x4d6>
 8004296:	bf00      	nop
 8004298:	40011000 	.word	0x40011000
 800429c:	40011400 	.word	0x40011400
 80042a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042b6:	4642      	mov	r2, r8
 80042b8:	464b      	mov	r3, r9
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	6239      	str	r1, [r7, #32]
 80042be:	415b      	adcs	r3, r3
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042c6:	4641      	mov	r1, r8
 80042c8:	1854      	adds	r4, r2, r1
 80042ca:	4649      	mov	r1, r9
 80042cc:	eb43 0501 	adc.w	r5, r3, r1
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	00eb      	lsls	r3, r5, #3
 80042da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042de:	00e2      	lsls	r2, r4, #3
 80042e0:	4614      	mov	r4, r2
 80042e2:	461d      	mov	r5, r3
 80042e4:	4643      	mov	r3, r8
 80042e6:	18e3      	adds	r3, r4, r3
 80042e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042ec:	464b      	mov	r3, r9
 80042ee:	eb45 0303 	adc.w	r3, r5, r3
 80042f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004312:	4629      	mov	r1, r5
 8004314:	008b      	lsls	r3, r1, #2
 8004316:	4621      	mov	r1, r4
 8004318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431c:	4621      	mov	r1, r4
 800431e:	008a      	lsls	r2, r1, #2
 8004320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004324:	f7fc f968 	bl	80005f8 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4b60      	ldr	r3, [pc, #384]	; (80044b0 <UART_SetConfig+0x4e4>)
 800432e:	fba3 2302 	umull	r2, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	011c      	lsls	r4, r3, #4
 8004336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004340:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	1891      	adds	r1, r2, r2
 800434e:	61b9      	str	r1, [r7, #24]
 8004350:	415b      	adcs	r3, r3
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004358:	4641      	mov	r1, r8
 800435a:	1851      	adds	r1, r2, r1
 800435c:	6139      	str	r1, [r7, #16]
 800435e:	4649      	mov	r1, r9
 8004360:	414b      	adcs	r3, r1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004370:	4659      	mov	r1, fp
 8004372:	00cb      	lsls	r3, r1, #3
 8004374:	4651      	mov	r1, sl
 8004376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437a:	4651      	mov	r1, sl
 800437c:	00ca      	lsls	r2, r1, #3
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	4603      	mov	r3, r0
 8004384:	4642      	mov	r2, r8
 8004386:	189b      	adds	r3, r3, r2
 8004388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800438c:	464b      	mov	r3, r9
 800438e:	460a      	mov	r2, r1
 8004390:	eb42 0303 	adc.w	r3, r2, r3
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043b0:	4649      	mov	r1, r9
 80043b2:	008b      	lsls	r3, r1, #2
 80043b4:	4641      	mov	r1, r8
 80043b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ba:	4641      	mov	r1, r8
 80043bc:	008a      	lsls	r2, r1, #2
 80043be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043c2:	f7fc f919 	bl	80005f8 <__aeabi_uldivmod>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <UART_SetConfig+0x4e4>)
 80043cc:	fba3 1302 	umull	r1, r3, r3, r2
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	2164      	movs	r1, #100	; 0x64
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	3332      	adds	r3, #50	; 0x32
 80043de:	4a34      	ldr	r2, [pc, #208]	; (80044b0 <UART_SetConfig+0x4e4>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ea:	441c      	add	r4, r3
 80043ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f0:	2200      	movs	r2, #0
 80043f2:	673b      	str	r3, [r7, #112]	; 0x70
 80043f4:	677a      	str	r2, [r7, #116]	; 0x74
 80043f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043fa:	4642      	mov	r2, r8
 80043fc:	464b      	mov	r3, r9
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	415b      	adcs	r3, r3
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800440a:	4641      	mov	r1, r8
 800440c:	1851      	adds	r1, r2, r1
 800440e:	6039      	str	r1, [r7, #0]
 8004410:	4649      	mov	r1, r9
 8004412:	414b      	adcs	r3, r1
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004422:	4659      	mov	r1, fp
 8004424:	00cb      	lsls	r3, r1, #3
 8004426:	4651      	mov	r1, sl
 8004428:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442c:	4651      	mov	r1, sl
 800442e:	00ca      	lsls	r2, r1, #3
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	4603      	mov	r3, r0
 8004436:	4642      	mov	r2, r8
 8004438:	189b      	adds	r3, r3, r2
 800443a:	66bb      	str	r3, [r7, #104]	; 0x68
 800443c:	464b      	mov	r3, r9
 800443e:	460a      	mov	r2, r1
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	663b      	str	r3, [r7, #96]	; 0x60
 8004450:	667a      	str	r2, [r7, #100]	; 0x64
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800445e:	4649      	mov	r1, r9
 8004460:	008b      	lsls	r3, r1, #2
 8004462:	4641      	mov	r1, r8
 8004464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004468:	4641      	mov	r1, r8
 800446a:	008a      	lsls	r2, r1, #2
 800446c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004470:	f7fc f8c2 	bl	80005f8 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <UART_SetConfig+0x4e4>)
 800447a:	fba3 1302 	umull	r1, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2164      	movs	r1, #100	; 0x64
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	3332      	adds	r3, #50	; 0x32
 800448c:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <UART_SetConfig+0x4e4>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4422      	add	r2, r4
 80044a0:	609a      	str	r2, [r3, #8]
}
 80044a2:	bf00      	nop
 80044a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044a8:	46bd      	mov	sp, r7
 80044aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ae:	bf00      	nop
 80044b0:	51eb851f 	.word	0x51eb851f

080044b4 <__errno>:
 80044b4:	4b01      	ldr	r3, [pc, #4]	; (80044bc <__errno+0x8>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000010 	.word	0x20000010

080044c0 <__libc_init_array>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4d0d      	ldr	r5, [pc, #52]	; (80044f8 <__libc_init_array+0x38>)
 80044c4:	4c0d      	ldr	r4, [pc, #52]	; (80044fc <__libc_init_array+0x3c>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	2600      	movs	r6, #0
 80044cc:	42a6      	cmp	r6, r4
 80044ce:	d109      	bne.n	80044e4 <__libc_init_array+0x24>
 80044d0:	4d0b      	ldr	r5, [pc, #44]	; (8004500 <__libc_init_array+0x40>)
 80044d2:	4c0c      	ldr	r4, [pc, #48]	; (8004504 <__libc_init_array+0x44>)
 80044d4:	f000 ffae 	bl	8005434 <_init>
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	2600      	movs	r6, #0
 80044de:	42a6      	cmp	r6, r4
 80044e0:	d105      	bne.n	80044ee <__libc_init_array+0x2e>
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e8:	4798      	blx	r3
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7ee      	b.n	80044cc <__libc_init_array+0xc>
 80044ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f2:	4798      	blx	r3
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7f2      	b.n	80044de <__libc_init_array+0x1e>
 80044f8:	0800551c 	.word	0x0800551c
 80044fc:	0800551c 	.word	0x0800551c
 8004500:	0800551c 	.word	0x0800551c
 8004504:	08005520 	.word	0x08005520

08004508 <memset>:
 8004508:	4402      	add	r2, r0
 800450a:	4603      	mov	r3, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	d100      	bne.n	8004512 <memset+0xa>
 8004510:	4770      	bx	lr
 8004512:	f803 1b01 	strb.w	r1, [r3], #1
 8004516:	e7f9      	b.n	800450c <memset+0x4>

08004518 <iprintf>:
 8004518:	b40f      	push	{r0, r1, r2, r3}
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <iprintf+0x2c>)
 800451c:	b513      	push	{r0, r1, r4, lr}
 800451e:	681c      	ldr	r4, [r3, #0]
 8004520:	b124      	cbz	r4, 800452c <iprintf+0x14>
 8004522:	69a3      	ldr	r3, [r4, #24]
 8004524:	b913      	cbnz	r3, 800452c <iprintf+0x14>
 8004526:	4620      	mov	r0, r4
 8004528:	f000 f866 	bl	80045f8 <__sinit>
 800452c:	ab05      	add	r3, sp, #20
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	68a1      	ldr	r1, [r4, #8]
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	4620      	mov	r0, r4
 8004536:	f000 f9bd 	bl	80048b4 <_vfiprintf_r>
 800453a:	b002      	add	sp, #8
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr
 8004544:	20000010 	.word	0x20000010

08004548 <std>:
 8004548:	2300      	movs	r3, #0
 800454a:	b510      	push	{r4, lr}
 800454c:	4604      	mov	r4, r0
 800454e:	e9c0 3300 	strd	r3, r3, [r0]
 8004552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004556:	6083      	str	r3, [r0, #8]
 8004558:	8181      	strh	r1, [r0, #12]
 800455a:	6643      	str	r3, [r0, #100]	; 0x64
 800455c:	81c2      	strh	r2, [r0, #14]
 800455e:	6183      	str	r3, [r0, #24]
 8004560:	4619      	mov	r1, r3
 8004562:	2208      	movs	r2, #8
 8004564:	305c      	adds	r0, #92	; 0x5c
 8004566:	f7ff ffcf 	bl	8004508 <memset>
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <std+0x38>)
 800456c:	6263      	str	r3, [r4, #36]	; 0x24
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <std+0x3c>)
 8004570:	62a3      	str	r3, [r4, #40]	; 0x28
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <std+0x40>)
 8004574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <std+0x44>)
 8004578:	6224      	str	r4, [r4, #32]
 800457a:	6323      	str	r3, [r4, #48]	; 0x30
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	08004e5d 	.word	0x08004e5d
 8004584:	08004e7f 	.word	0x08004e7f
 8004588:	08004eb7 	.word	0x08004eb7
 800458c:	08004edb 	.word	0x08004edb

08004590 <_cleanup_r>:
 8004590:	4901      	ldr	r1, [pc, #4]	; (8004598 <_cleanup_r+0x8>)
 8004592:	f000 b8af 	b.w	80046f4 <_fwalk_reent>
 8004596:	bf00      	nop
 8004598:	080051b5 	.word	0x080051b5

0800459c <__sfmoreglue>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	2268      	movs	r2, #104	; 0x68
 80045a0:	1e4d      	subs	r5, r1, #1
 80045a2:	4355      	muls	r5, r2
 80045a4:	460e      	mov	r6, r1
 80045a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045aa:	f000 f8e5 	bl	8004778 <_malloc_r>
 80045ae:	4604      	mov	r4, r0
 80045b0:	b140      	cbz	r0, 80045c4 <__sfmoreglue+0x28>
 80045b2:	2100      	movs	r1, #0
 80045b4:	e9c0 1600 	strd	r1, r6, [r0]
 80045b8:	300c      	adds	r0, #12
 80045ba:	60a0      	str	r0, [r4, #8]
 80045bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045c0:	f7ff ffa2 	bl	8004508 <memset>
 80045c4:	4620      	mov	r0, r4
 80045c6:	bd70      	pop	{r4, r5, r6, pc}

080045c8 <__sfp_lock_acquire>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__sfp_lock_acquire+0x8>)
 80045ca:	f000 b8b3 	b.w	8004734 <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	2000024d 	.word	0x2000024d

080045d4 <__sfp_lock_release>:
 80045d4:	4801      	ldr	r0, [pc, #4]	; (80045dc <__sfp_lock_release+0x8>)
 80045d6:	f000 b8ae 	b.w	8004736 <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	2000024d 	.word	0x2000024d

080045e0 <__sinit_lock_acquire>:
 80045e0:	4801      	ldr	r0, [pc, #4]	; (80045e8 <__sinit_lock_acquire+0x8>)
 80045e2:	f000 b8a7 	b.w	8004734 <__retarget_lock_acquire_recursive>
 80045e6:	bf00      	nop
 80045e8:	2000024e 	.word	0x2000024e

080045ec <__sinit_lock_release>:
 80045ec:	4801      	ldr	r0, [pc, #4]	; (80045f4 <__sinit_lock_release+0x8>)
 80045ee:	f000 b8a2 	b.w	8004736 <__retarget_lock_release_recursive>
 80045f2:	bf00      	nop
 80045f4:	2000024e 	.word	0x2000024e

080045f8 <__sinit>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4604      	mov	r4, r0
 80045fc:	f7ff fff0 	bl	80045e0 <__sinit_lock_acquire>
 8004600:	69a3      	ldr	r3, [r4, #24]
 8004602:	b11b      	cbz	r3, 800460c <__sinit+0x14>
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004608:	f7ff bff0 	b.w	80045ec <__sinit_lock_release>
 800460c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004610:	6523      	str	r3, [r4, #80]	; 0x50
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <__sinit+0x68>)
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <__sinit+0x6c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	62a2      	str	r2, [r4, #40]	; 0x28
 800461a:	42a3      	cmp	r3, r4
 800461c:	bf04      	itt	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	61a3      	streq	r3, [r4, #24]
 8004622:	4620      	mov	r0, r4
 8004624:	f000 f820 	bl	8004668 <__sfp>
 8004628:	6060      	str	r0, [r4, #4]
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f81c 	bl	8004668 <__sfp>
 8004630:	60a0      	str	r0, [r4, #8]
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f818 	bl	8004668 <__sfp>
 8004638:	2200      	movs	r2, #0
 800463a:	60e0      	str	r0, [r4, #12]
 800463c:	2104      	movs	r1, #4
 800463e:	6860      	ldr	r0, [r4, #4]
 8004640:	f7ff ff82 	bl	8004548 <std>
 8004644:	68a0      	ldr	r0, [r4, #8]
 8004646:	2201      	movs	r2, #1
 8004648:	2109      	movs	r1, #9
 800464a:	f7ff ff7d 	bl	8004548 <std>
 800464e:	68e0      	ldr	r0, [r4, #12]
 8004650:	2202      	movs	r2, #2
 8004652:	2112      	movs	r1, #18
 8004654:	f7ff ff78 	bl	8004548 <std>
 8004658:	2301      	movs	r3, #1
 800465a:	61a3      	str	r3, [r4, #24]
 800465c:	e7d2      	b.n	8004604 <__sinit+0xc>
 800465e:	bf00      	nop
 8004660:	0800547c 	.word	0x0800547c
 8004664:	08004591 	.word	0x08004591

08004668 <__sfp>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	4607      	mov	r7, r0
 800466c:	f7ff ffac 	bl	80045c8 <__sfp_lock_acquire>
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <__sfp+0x84>)
 8004672:	681e      	ldr	r6, [r3, #0]
 8004674:	69b3      	ldr	r3, [r6, #24]
 8004676:	b913      	cbnz	r3, 800467e <__sfp+0x16>
 8004678:	4630      	mov	r0, r6
 800467a:	f7ff ffbd 	bl	80045f8 <__sinit>
 800467e:	3648      	adds	r6, #72	; 0x48
 8004680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004684:	3b01      	subs	r3, #1
 8004686:	d503      	bpl.n	8004690 <__sfp+0x28>
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	b30b      	cbz	r3, 80046d0 <__sfp+0x68>
 800468c:	6836      	ldr	r6, [r6, #0]
 800468e:	e7f7      	b.n	8004680 <__sfp+0x18>
 8004690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004694:	b9d5      	cbnz	r5, 80046cc <__sfp+0x64>
 8004696:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <__sfp+0x88>)
 8004698:	60e3      	str	r3, [r4, #12]
 800469a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800469e:	6665      	str	r5, [r4, #100]	; 0x64
 80046a0:	f000 f847 	bl	8004732 <__retarget_lock_init_recursive>
 80046a4:	f7ff ff96 	bl	80045d4 <__sfp_lock_release>
 80046a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046b0:	6025      	str	r5, [r4, #0]
 80046b2:	61a5      	str	r5, [r4, #24]
 80046b4:	2208      	movs	r2, #8
 80046b6:	4629      	mov	r1, r5
 80046b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046bc:	f7ff ff24 	bl	8004508 <memset>
 80046c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046c8:	4620      	mov	r0, r4
 80046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046cc:	3468      	adds	r4, #104	; 0x68
 80046ce:	e7d9      	b.n	8004684 <__sfp+0x1c>
 80046d0:	2104      	movs	r1, #4
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7ff ff62 	bl	800459c <__sfmoreglue>
 80046d8:	4604      	mov	r4, r0
 80046da:	6030      	str	r0, [r6, #0]
 80046dc:	2800      	cmp	r0, #0
 80046de:	d1d5      	bne.n	800468c <__sfp+0x24>
 80046e0:	f7ff ff78 	bl	80045d4 <__sfp_lock_release>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	e7ee      	b.n	80046c8 <__sfp+0x60>
 80046ea:	bf00      	nop
 80046ec:	0800547c 	.word	0x0800547c
 80046f0:	ffff0001 	.word	0xffff0001

080046f4 <_fwalk_reent>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	4606      	mov	r6, r0
 80046fa:	4688      	mov	r8, r1
 80046fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004700:	2700      	movs	r7, #0
 8004702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004706:	f1b9 0901 	subs.w	r9, r9, #1
 800470a:	d505      	bpl.n	8004718 <_fwalk_reent+0x24>
 800470c:	6824      	ldr	r4, [r4, #0]
 800470e:	2c00      	cmp	r4, #0
 8004710:	d1f7      	bne.n	8004702 <_fwalk_reent+0xe>
 8004712:	4638      	mov	r0, r7
 8004714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004718:	89ab      	ldrh	r3, [r5, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d907      	bls.n	800472e <_fwalk_reent+0x3a>
 800471e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004722:	3301      	adds	r3, #1
 8004724:	d003      	beq.n	800472e <_fwalk_reent+0x3a>
 8004726:	4629      	mov	r1, r5
 8004728:	4630      	mov	r0, r6
 800472a:	47c0      	blx	r8
 800472c:	4307      	orrs	r7, r0
 800472e:	3568      	adds	r5, #104	; 0x68
 8004730:	e7e9      	b.n	8004706 <_fwalk_reent+0x12>

08004732 <__retarget_lock_init_recursive>:
 8004732:	4770      	bx	lr

08004734 <__retarget_lock_acquire_recursive>:
 8004734:	4770      	bx	lr

08004736 <__retarget_lock_release_recursive>:
 8004736:	4770      	bx	lr

08004738 <sbrk_aligned>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	4e0e      	ldr	r6, [pc, #56]	; (8004774 <sbrk_aligned+0x3c>)
 800473c:	460c      	mov	r4, r1
 800473e:	6831      	ldr	r1, [r6, #0]
 8004740:	4605      	mov	r5, r0
 8004742:	b911      	cbnz	r1, 800474a <sbrk_aligned+0x12>
 8004744:	f000 fb7a 	bl	8004e3c <_sbrk_r>
 8004748:	6030      	str	r0, [r6, #0]
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 fb75 	bl	8004e3c <_sbrk_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d00a      	beq.n	800476c <sbrk_aligned+0x34>
 8004756:	1cc4      	adds	r4, r0, #3
 8004758:	f024 0403 	bic.w	r4, r4, #3
 800475c:	42a0      	cmp	r0, r4
 800475e:	d007      	beq.n	8004770 <sbrk_aligned+0x38>
 8004760:	1a21      	subs	r1, r4, r0
 8004762:	4628      	mov	r0, r5
 8004764:	f000 fb6a 	bl	8004e3c <_sbrk_r>
 8004768:	3001      	adds	r0, #1
 800476a:	d101      	bne.n	8004770 <sbrk_aligned+0x38>
 800476c:	f04f 34ff 	mov.w	r4, #4294967295
 8004770:	4620      	mov	r0, r4
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	20000254 	.word	0x20000254

08004778 <_malloc_r>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	1ccd      	adds	r5, r1, #3
 800477e:	f025 0503 	bic.w	r5, r5, #3
 8004782:	3508      	adds	r5, #8
 8004784:	2d0c      	cmp	r5, #12
 8004786:	bf38      	it	cc
 8004788:	250c      	movcc	r5, #12
 800478a:	2d00      	cmp	r5, #0
 800478c:	4607      	mov	r7, r0
 800478e:	db01      	blt.n	8004794 <_malloc_r+0x1c>
 8004790:	42a9      	cmp	r1, r5
 8004792:	d905      	bls.n	80047a0 <_malloc_r+0x28>
 8004794:	230c      	movs	r3, #12
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	2600      	movs	r6, #0
 800479a:	4630      	mov	r0, r6
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	4e2e      	ldr	r6, [pc, #184]	; (800485c <_malloc_r+0xe4>)
 80047a2:	f000 fdbb 	bl	800531c <__malloc_lock>
 80047a6:	6833      	ldr	r3, [r6, #0]
 80047a8:	461c      	mov	r4, r3
 80047aa:	bb34      	cbnz	r4, 80047fa <_malloc_r+0x82>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ffc2 	bl	8004738 <sbrk_aligned>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	4604      	mov	r4, r0
 80047b8:	d14d      	bne.n	8004856 <_malloc_r+0xde>
 80047ba:	6834      	ldr	r4, [r6, #0]
 80047bc:	4626      	mov	r6, r4
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d140      	bne.n	8004844 <_malloc_r+0xcc>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	4631      	mov	r1, r6
 80047c6:	4638      	mov	r0, r7
 80047c8:	eb04 0803 	add.w	r8, r4, r3
 80047cc:	f000 fb36 	bl	8004e3c <_sbrk_r>
 80047d0:	4580      	cmp	r8, r0
 80047d2:	d13a      	bne.n	800484a <_malloc_r+0xd2>
 80047d4:	6821      	ldr	r1, [r4, #0]
 80047d6:	3503      	adds	r5, #3
 80047d8:	1a6d      	subs	r5, r5, r1
 80047da:	f025 0503 	bic.w	r5, r5, #3
 80047de:	3508      	adds	r5, #8
 80047e0:	2d0c      	cmp	r5, #12
 80047e2:	bf38      	it	cc
 80047e4:	250c      	movcc	r5, #12
 80047e6:	4629      	mov	r1, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff ffa5 	bl	8004738 <sbrk_aligned>
 80047ee:	3001      	adds	r0, #1
 80047f0:	d02b      	beq.n	800484a <_malloc_r+0xd2>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	442b      	add	r3, r5
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	e00e      	b.n	8004818 <_malloc_r+0xa0>
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	1b52      	subs	r2, r2, r5
 80047fe:	d41e      	bmi.n	800483e <_malloc_r+0xc6>
 8004800:	2a0b      	cmp	r2, #11
 8004802:	d916      	bls.n	8004832 <_malloc_r+0xba>
 8004804:	1961      	adds	r1, r4, r5
 8004806:	42a3      	cmp	r3, r4
 8004808:	6025      	str	r5, [r4, #0]
 800480a:	bf18      	it	ne
 800480c:	6059      	strne	r1, [r3, #4]
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	bf08      	it	eq
 8004812:	6031      	streq	r1, [r6, #0]
 8004814:	5162      	str	r2, [r4, r5]
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	4638      	mov	r0, r7
 800481a:	f104 060b 	add.w	r6, r4, #11
 800481e:	f000 fd83 	bl	8005328 <__malloc_unlock>
 8004822:	f026 0607 	bic.w	r6, r6, #7
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	1af2      	subs	r2, r6, r3
 800482a:	d0b6      	beq.n	800479a <_malloc_r+0x22>
 800482c:	1b9b      	subs	r3, r3, r6
 800482e:	50a3      	str	r3, [r4, r2]
 8004830:	e7b3      	b.n	800479a <_malloc_r+0x22>
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	42a3      	cmp	r3, r4
 8004836:	bf0c      	ite	eq
 8004838:	6032      	streq	r2, [r6, #0]
 800483a:	605a      	strne	r2, [r3, #4]
 800483c:	e7ec      	b.n	8004818 <_malloc_r+0xa0>
 800483e:	4623      	mov	r3, r4
 8004840:	6864      	ldr	r4, [r4, #4]
 8004842:	e7b2      	b.n	80047aa <_malloc_r+0x32>
 8004844:	4634      	mov	r4, r6
 8004846:	6876      	ldr	r6, [r6, #4]
 8004848:	e7b9      	b.n	80047be <_malloc_r+0x46>
 800484a:	230c      	movs	r3, #12
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4638      	mov	r0, r7
 8004850:	f000 fd6a 	bl	8005328 <__malloc_unlock>
 8004854:	e7a1      	b.n	800479a <_malloc_r+0x22>
 8004856:	6025      	str	r5, [r4, #0]
 8004858:	e7de      	b.n	8004818 <_malloc_r+0xa0>
 800485a:	bf00      	nop
 800485c:	20000250 	.word	0x20000250

08004860 <__sfputc_r>:
 8004860:	6893      	ldr	r3, [r2, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	b410      	push	{r4}
 8004868:	6093      	str	r3, [r2, #8]
 800486a:	da08      	bge.n	800487e <__sfputc_r+0x1e>
 800486c:	6994      	ldr	r4, [r2, #24]
 800486e:	42a3      	cmp	r3, r4
 8004870:	db01      	blt.n	8004876 <__sfputc_r+0x16>
 8004872:	290a      	cmp	r1, #10
 8004874:	d103      	bne.n	800487e <__sfputc_r+0x1e>
 8004876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800487a:	f000 bb33 	b.w	8004ee4 <__swbuf_r>
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	1c58      	adds	r0, r3, #1
 8004882:	6010      	str	r0, [r2, #0]
 8004884:	7019      	strb	r1, [r3, #0]
 8004886:	4608      	mov	r0, r1
 8004888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800488c:	4770      	bx	lr

0800488e <__sfputs_r>:
 800488e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004890:	4606      	mov	r6, r0
 8004892:	460f      	mov	r7, r1
 8004894:	4614      	mov	r4, r2
 8004896:	18d5      	adds	r5, r2, r3
 8004898:	42ac      	cmp	r4, r5
 800489a:	d101      	bne.n	80048a0 <__sfputs_r+0x12>
 800489c:	2000      	movs	r0, #0
 800489e:	e007      	b.n	80048b0 <__sfputs_r+0x22>
 80048a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a4:	463a      	mov	r2, r7
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ffda 	bl	8004860 <__sfputc_r>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d1f3      	bne.n	8004898 <__sfputs_r+0xa>
 80048b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048b4 <_vfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	460d      	mov	r5, r1
 80048ba:	b09d      	sub	sp, #116	; 0x74
 80048bc:	4614      	mov	r4, r2
 80048be:	4698      	mov	r8, r3
 80048c0:	4606      	mov	r6, r0
 80048c2:	b118      	cbz	r0, 80048cc <_vfiprintf_r+0x18>
 80048c4:	6983      	ldr	r3, [r0, #24]
 80048c6:	b90b      	cbnz	r3, 80048cc <_vfiprintf_r+0x18>
 80048c8:	f7ff fe96 	bl	80045f8 <__sinit>
 80048cc:	4b89      	ldr	r3, [pc, #548]	; (8004af4 <_vfiprintf_r+0x240>)
 80048ce:	429d      	cmp	r5, r3
 80048d0:	d11b      	bne.n	800490a <_vfiprintf_r+0x56>
 80048d2:	6875      	ldr	r5, [r6, #4]
 80048d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048d6:	07d9      	lsls	r1, r3, #31
 80048d8:	d405      	bmi.n	80048e6 <_vfiprintf_r+0x32>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	059a      	lsls	r2, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_vfiprintf_r+0x32>
 80048e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048e2:	f7ff ff27 	bl	8004734 <__retarget_lock_acquire_recursive>
 80048e6:	89ab      	ldrh	r3, [r5, #12]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	d501      	bpl.n	80048f0 <_vfiprintf_r+0x3c>
 80048ec:	692b      	ldr	r3, [r5, #16]
 80048ee:	b9eb      	cbnz	r3, 800492c <_vfiprintf_r+0x78>
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f000 fb5a 	bl	8004fac <__swsetup_r>
 80048f8:	b1c0      	cbz	r0, 800492c <_vfiprintf_r+0x78>
 80048fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048fc:	07dc      	lsls	r4, r3, #31
 80048fe:	d50e      	bpl.n	800491e <_vfiprintf_r+0x6a>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	b01d      	add	sp, #116	; 0x74
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <_vfiprintf_r+0x244>)
 800490c:	429d      	cmp	r5, r3
 800490e:	d101      	bne.n	8004914 <_vfiprintf_r+0x60>
 8004910:	68b5      	ldr	r5, [r6, #8]
 8004912:	e7df      	b.n	80048d4 <_vfiprintf_r+0x20>
 8004914:	4b79      	ldr	r3, [pc, #484]	; (8004afc <_vfiprintf_r+0x248>)
 8004916:	429d      	cmp	r5, r3
 8004918:	bf08      	it	eq
 800491a:	68f5      	ldreq	r5, [r6, #12]
 800491c:	e7da      	b.n	80048d4 <_vfiprintf_r+0x20>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	0598      	lsls	r0, r3, #22
 8004922:	d4ed      	bmi.n	8004900 <_vfiprintf_r+0x4c>
 8004924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004926:	f7ff ff06 	bl	8004736 <__retarget_lock_release_recursive>
 800492a:	e7e9      	b.n	8004900 <_vfiprintf_r+0x4c>
 800492c:	2300      	movs	r3, #0
 800492e:	9309      	str	r3, [sp, #36]	; 0x24
 8004930:	2320      	movs	r3, #32
 8004932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004936:	f8cd 800c 	str.w	r8, [sp, #12]
 800493a:	2330      	movs	r3, #48	; 0x30
 800493c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b00 <_vfiprintf_r+0x24c>
 8004940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004944:	f04f 0901 	mov.w	r9, #1
 8004948:	4623      	mov	r3, r4
 800494a:	469a      	mov	sl, r3
 800494c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004950:	b10a      	cbz	r2, 8004956 <_vfiprintf_r+0xa2>
 8004952:	2a25      	cmp	r2, #37	; 0x25
 8004954:	d1f9      	bne.n	800494a <_vfiprintf_r+0x96>
 8004956:	ebba 0b04 	subs.w	fp, sl, r4
 800495a:	d00b      	beq.n	8004974 <_vfiprintf_r+0xc0>
 800495c:	465b      	mov	r3, fp
 800495e:	4622      	mov	r2, r4
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff ff93 	bl	800488e <__sfputs_r>
 8004968:	3001      	adds	r0, #1
 800496a:	f000 80aa 	beq.w	8004ac2 <_vfiprintf_r+0x20e>
 800496e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004970:	445a      	add	r2, fp
 8004972:	9209      	str	r2, [sp, #36]	; 0x24
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a2 	beq.w	8004ac2 <_vfiprintf_r+0x20e>
 800497e:	2300      	movs	r3, #0
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004988:	f10a 0a01 	add.w	sl, sl, #1
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004994:	931a      	str	r3, [sp, #104]	; 0x68
 8004996:	4654      	mov	r4, sl
 8004998:	2205      	movs	r2, #5
 800499a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499e:	4858      	ldr	r0, [pc, #352]	; (8004b00 <_vfiprintf_r+0x24c>)
 80049a0:	f7fb fc1e 	bl	80001e0 <memchr>
 80049a4:	9a04      	ldr	r2, [sp, #16]
 80049a6:	b9d8      	cbnz	r0, 80049e0 <_vfiprintf_r+0x12c>
 80049a8:	06d1      	lsls	r1, r2, #27
 80049aa:	bf44      	itt	mi
 80049ac:	2320      	movmi	r3, #32
 80049ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b2:	0713      	lsls	r3, r2, #28
 80049b4:	bf44      	itt	mi
 80049b6:	232b      	movmi	r3, #43	; 0x2b
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049bc:	f89a 3000 	ldrb.w	r3, [sl]
 80049c0:	2b2a      	cmp	r3, #42	; 0x2a
 80049c2:	d015      	beq.n	80049f0 <_vfiprintf_r+0x13c>
 80049c4:	9a07      	ldr	r2, [sp, #28]
 80049c6:	4654      	mov	r4, sl
 80049c8:	2000      	movs	r0, #0
 80049ca:	f04f 0c0a 	mov.w	ip, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d4:	3b30      	subs	r3, #48	; 0x30
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d94e      	bls.n	8004a78 <_vfiprintf_r+0x1c4>
 80049da:	b1b0      	cbz	r0, 8004a0a <_vfiprintf_r+0x156>
 80049dc:	9207      	str	r2, [sp, #28]
 80049de:	e014      	b.n	8004a0a <_vfiprintf_r+0x156>
 80049e0:	eba0 0308 	sub.w	r3, r0, r8
 80049e4:	fa09 f303 	lsl.w	r3, r9, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	46a2      	mov	sl, r4
 80049ee:	e7d2      	b.n	8004996 <_vfiprintf_r+0xe2>
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	1d19      	adds	r1, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	9103      	str	r1, [sp, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bfbb      	ittet	lt
 80049fc:	425b      	neglt	r3, r3
 80049fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004a02:	9307      	strge	r3, [sp, #28]
 8004a04:	9307      	strlt	r3, [sp, #28]
 8004a06:	bfb8      	it	lt
 8004a08:	9204      	strlt	r2, [sp, #16]
 8004a0a:	7823      	ldrb	r3, [r4, #0]
 8004a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a0e:	d10c      	bne.n	8004a2a <_vfiprintf_r+0x176>
 8004a10:	7863      	ldrb	r3, [r4, #1]
 8004a12:	2b2a      	cmp	r3, #42	; 0x2a
 8004a14:	d135      	bne.n	8004a82 <_vfiprintf_r+0x1ce>
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	9203      	str	r2, [sp, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a26:	3402      	adds	r4, #2
 8004a28:	9305      	str	r3, [sp, #20]
 8004a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b10 <_vfiprintf_r+0x25c>
 8004a2e:	7821      	ldrb	r1, [r4, #0]
 8004a30:	2203      	movs	r2, #3
 8004a32:	4650      	mov	r0, sl
 8004a34:	f7fb fbd4 	bl	80001e0 <memchr>
 8004a38:	b140      	cbz	r0, 8004a4c <_vfiprintf_r+0x198>
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	eba0 000a 	sub.w	r0, r0, sl
 8004a40:	fa03 f000 	lsl.w	r0, r3, r0
 8004a44:	9b04      	ldr	r3, [sp, #16]
 8004a46:	4303      	orrs	r3, r0
 8004a48:	3401      	adds	r4, #1
 8004a4a:	9304      	str	r3, [sp, #16]
 8004a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a50:	482c      	ldr	r0, [pc, #176]	; (8004b04 <_vfiprintf_r+0x250>)
 8004a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a56:	2206      	movs	r2, #6
 8004a58:	f7fb fbc2 	bl	80001e0 <memchr>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d03f      	beq.n	8004ae0 <_vfiprintf_r+0x22c>
 8004a60:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <_vfiprintf_r+0x254>)
 8004a62:	bb1b      	cbnz	r3, 8004aac <_vfiprintf_r+0x1f8>
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	3307      	adds	r3, #7
 8004a68:	f023 0307 	bic.w	r3, r3, #7
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a72:	443b      	add	r3, r7
 8004a74:	9309      	str	r3, [sp, #36]	; 0x24
 8004a76:	e767      	b.n	8004948 <_vfiprintf_r+0x94>
 8004a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e7a5      	b.n	80049ce <_vfiprintf_r+0x11a>
 8004a82:	2300      	movs	r3, #0
 8004a84:	3401      	adds	r4, #1
 8004a86:	9305      	str	r3, [sp, #20]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 0c0a 	mov.w	ip, #10
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a94:	3a30      	subs	r2, #48	; 0x30
 8004a96:	2a09      	cmp	r2, #9
 8004a98:	d903      	bls.n	8004aa2 <_vfiprintf_r+0x1ee>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0c5      	beq.n	8004a2a <_vfiprintf_r+0x176>
 8004a9e:	9105      	str	r1, [sp, #20]
 8004aa0:	e7c3      	b.n	8004a2a <_vfiprintf_r+0x176>
 8004aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e7f0      	b.n	8004a8e <_vfiprintf_r+0x1da>
 8004aac:	ab03      	add	r3, sp, #12
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <_vfiprintf_r+0x258>)
 8004ab4:	a904      	add	r1, sp, #16
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f3af 8000 	nop.w
 8004abc:	4607      	mov	r7, r0
 8004abe:	1c78      	adds	r0, r7, #1
 8004ac0:	d1d6      	bne.n	8004a70 <_vfiprintf_r+0x1bc>
 8004ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ac4:	07d9      	lsls	r1, r3, #31
 8004ac6:	d405      	bmi.n	8004ad4 <_vfiprintf_r+0x220>
 8004ac8:	89ab      	ldrh	r3, [r5, #12]
 8004aca:	059a      	lsls	r2, r3, #22
 8004acc:	d402      	bmi.n	8004ad4 <_vfiprintf_r+0x220>
 8004ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ad0:	f7ff fe31 	bl	8004736 <__retarget_lock_release_recursive>
 8004ad4:	89ab      	ldrh	r3, [r5, #12]
 8004ad6:	065b      	lsls	r3, r3, #25
 8004ad8:	f53f af12 	bmi.w	8004900 <_vfiprintf_r+0x4c>
 8004adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ade:	e711      	b.n	8004904 <_vfiprintf_r+0x50>
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <_vfiprintf_r+0x258>)
 8004ae8:	a904      	add	r1, sp, #16
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 f880 	bl	8004bf0 <_printf_i>
 8004af0:	e7e4      	b.n	8004abc <_vfiprintf_r+0x208>
 8004af2:	bf00      	nop
 8004af4:	080054a0 	.word	0x080054a0
 8004af8:	080054c0 	.word	0x080054c0
 8004afc:	08005480 	.word	0x08005480
 8004b00:	080054e0 	.word	0x080054e0
 8004b04:	080054ea 	.word	0x080054ea
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	0800488f 	.word	0x0800488f
 8004b10:	080054e6 	.word	0x080054e6

08004b14 <_printf_common>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4616      	mov	r6, r2
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	688a      	ldr	r2, [r1, #8]
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfb8      	it	lt
 8004b28:	4613      	movlt	r3, r2
 8004b2a:	6033      	str	r3, [r6, #0]
 8004b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b30:	4607      	mov	r7, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	b10a      	cbz	r2, 8004b3a <_printf_common+0x26>
 8004b36:	3301      	adds	r3, #1
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	0699      	lsls	r1, r3, #26
 8004b3e:	bf42      	ittt	mi
 8004b40:	6833      	ldrmi	r3, [r6, #0]
 8004b42:	3302      	addmi	r3, #2
 8004b44:	6033      	strmi	r3, [r6, #0]
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	f015 0506 	ands.w	r5, r5, #6
 8004b4c:	d106      	bne.n	8004b5c <_printf_common+0x48>
 8004b4e:	f104 0a19 	add.w	sl, r4, #25
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	6832      	ldr	r2, [r6, #0]
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dc26      	bgt.n	8004baa <_printf_common+0x96>
 8004b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b60:	1e13      	subs	r3, r2, #0
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	bf18      	it	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	0692      	lsls	r2, r2, #26
 8004b6a:	d42b      	bmi.n	8004bc4 <_printf_common+0xb0>
 8004b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b70:	4649      	mov	r1, r9
 8004b72:	4638      	mov	r0, r7
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d01e      	beq.n	8004bb8 <_printf_common+0xa4>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	68e5      	ldr	r5, [r4, #12]
 8004b7e:	6832      	ldr	r2, [r6, #0]
 8004b80:	f003 0306 	and.w	r3, r3, #6
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	bf08      	it	eq
 8004b88:	1aad      	subeq	r5, r5, r2
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	bf0c      	ite	eq
 8004b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b94:	2500      	movne	r5, #0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bfc4      	itt	gt
 8004b9a:	1a9b      	subgt	r3, r3, r2
 8004b9c:	18ed      	addgt	r5, r5, r3
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	341a      	adds	r4, #26
 8004ba2:	42b5      	cmp	r5, r6
 8004ba4:	d11a      	bne.n	8004bdc <_printf_common+0xc8>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e008      	b.n	8004bbc <_printf_common+0xa8>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4652      	mov	r2, sl
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	47c0      	blx	r8
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_printf_common+0xac>
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7c6      	b.n	8004b52 <_printf_common+0x3e>
 8004bc4:	18e1      	adds	r1, r4, r3
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	2030      	movs	r0, #48	; 0x30
 8004bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bce:	4422      	add	r2, r4
 8004bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd8:	3302      	adds	r3, #2
 8004bda:	e7c7      	b.n	8004b6c <_printf_common+0x58>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4622      	mov	r2, r4
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d0e6      	beq.n	8004bb8 <_printf_common+0xa4>
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7d9      	b.n	8004ba2 <_printf_common+0x8e>
	...

08004bf0 <_printf_i>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	7e0f      	ldrb	r7, [r1, #24]
 8004bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bf8:	2f78      	cmp	r7, #120	; 0x78
 8004bfa:	4691      	mov	r9, r2
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	469a      	mov	sl, r3
 8004c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c06:	d807      	bhi.n	8004c18 <_printf_i+0x28>
 8004c08:	2f62      	cmp	r7, #98	; 0x62
 8004c0a:	d80a      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	f000 80d8 	beq.w	8004dc2 <_printf_i+0x1d2>
 8004c12:	2f58      	cmp	r7, #88	; 0x58
 8004c14:	f000 80a3 	beq.w	8004d5e <_printf_i+0x16e>
 8004c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c20:	e03a      	b.n	8004c98 <_printf_i+0xa8>
 8004c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c26:	2b15      	cmp	r3, #21
 8004c28:	d8f6      	bhi.n	8004c18 <_printf_i+0x28>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_printf_i+0x40>)
 8004c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c19 	.word	0x08004c19
 8004c3c:	08004c19 	.word	0x08004c19
 8004c40:	08004c19 	.word	0x08004c19
 8004c44:	08004c19 	.word	0x08004c19
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c19 	.word	0x08004c19
 8004c50:	08004c19 	.word	0x08004c19
 8004c54:	08004c19 	.word	0x08004c19
 8004c58:	08004c19 	.word	0x08004c19
 8004c5c:	08004da9 	.word	0x08004da9
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004d8b 	.word	0x08004d8b
 8004c68:	08004c19 	.word	0x08004c19
 8004c6c:	08004c19 	.word	0x08004c19
 8004c70:	08004dcb 	.word	0x08004dcb
 8004c74:	08004c19 	.word	0x08004c19
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c19 	.word	0x08004c19
 8004c80:	08004c19 	.word	0x08004c19
 8004c84:	08004d93 	.word	0x08004d93
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	602a      	str	r2, [r5, #0]
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a3      	b.n	8004de4 <_printf_i+0x1f4>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	6829      	ldr	r1, [r5, #0]
 8004ca0:	0606      	lsls	r6, r0, #24
 8004ca2:	f101 0304 	add.w	r3, r1, #4
 8004ca6:	d50a      	bpl.n	8004cbe <_printf_i+0xce>
 8004ca8:	680e      	ldr	r6, [r1, #0]
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	da03      	bge.n	8004cb8 <_printf_i+0xc8>
 8004cb0:	232d      	movs	r3, #45	; 0x2d
 8004cb2:	4276      	negs	r6, r6
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb8:	485e      	ldr	r0, [pc, #376]	; (8004e34 <_printf_i+0x244>)
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e019      	b.n	8004cf2 <_printf_i+0x102>
 8004cbe:	680e      	ldr	r6, [r1, #0]
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cc6:	bf18      	it	ne
 8004cc8:	b236      	sxthne	r6, r6
 8004cca:	e7ef      	b.n	8004cac <_printf_i+0xbc>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	1d19      	adds	r1, r3, #4
 8004cd2:	6029      	str	r1, [r5, #0]
 8004cd4:	0601      	lsls	r1, r0, #24
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0xec>
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0xf2>
 8004cdc:	0646      	lsls	r6, r0, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0xe8>
 8004ce0:	881e      	ldrh	r6, [r3, #0]
 8004ce2:	4854      	ldr	r0, [pc, #336]	; (8004e34 <_printf_i+0x244>)
 8004ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2308      	moveq	r3, #8
 8004cea:	230a      	movne	r3, #10
 8004cec:	2100      	movs	r1, #0
 8004cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf2:	6865      	ldr	r5, [r4, #4]
 8004cf4:	60a5      	str	r5, [r4, #8]
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	bfa2      	ittt	ge
 8004cfa:	6821      	ldrge	r1, [r4, #0]
 8004cfc:	f021 0104 	bicge.w	r1, r1, #4
 8004d00:	6021      	strge	r1, [r4, #0]
 8004d02:	b90e      	cbnz	r6, 8004d08 <_printf_i+0x118>
 8004d04:	2d00      	cmp	r5, #0
 8004d06:	d04d      	beq.n	8004da4 <_printf_i+0x1b4>
 8004d08:	4615      	mov	r5, r2
 8004d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d12:	5dc7      	ldrb	r7, [r0, r7]
 8004d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d18:	4637      	mov	r7, r6
 8004d1a:	42bb      	cmp	r3, r7
 8004d1c:	460e      	mov	r6, r1
 8004d1e:	d9f4      	bls.n	8004d0a <_printf_i+0x11a>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10b      	bne.n	8004d3c <_printf_i+0x14c>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07de      	lsls	r6, r3, #31
 8004d28:	d508      	bpl.n	8004d3c <_printf_i+0x14c>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	bfde      	ittt	le
 8004d32:	2330      	movle	r3, #48	; 0x30
 8004d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	6122      	str	r2, [r4, #16]
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	464b      	mov	r3, r9
 8004d46:	aa03      	add	r2, sp, #12
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f7ff fee2 	bl	8004b14 <_printf_common>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d14c      	bne.n	8004dee <_printf_i+0x1fe>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	b004      	add	sp, #16
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	4835      	ldr	r0, [pc, #212]	; (8004e34 <_printf_i+0x244>)
 8004d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d64:	6829      	ldr	r1, [r5, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d6c:	6029      	str	r1, [r5, #0]
 8004d6e:	061d      	lsls	r5, r3, #24
 8004d70:	d514      	bpl.n	8004d9c <_printf_i+0x1ac>
 8004d72:	07df      	lsls	r7, r3, #31
 8004d74:	bf44      	itt	mi
 8004d76:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7a:	6023      	strmi	r3, [r4, #0]
 8004d7c:	b91e      	cbnz	r6, 8004d86 <_printf_i+0x196>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f023 0320 	bic.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	2310      	movs	r3, #16
 8004d88:	e7b0      	b.n	8004cec <_printf_i+0xfc>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	2378      	movs	r3, #120	; 0x78
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <_printf_i+0x248>)
 8004d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9a:	e7e3      	b.n	8004d64 <_printf_i+0x174>
 8004d9c:	0659      	lsls	r1, r3, #25
 8004d9e:	bf48      	it	mi
 8004da0:	b2b6      	uxthmi	r6, r6
 8004da2:	e7e6      	b.n	8004d72 <_printf_i+0x182>
 8004da4:	4615      	mov	r5, r2
 8004da6:	e7bb      	b.n	8004d20 <_printf_i+0x130>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	6826      	ldr	r6, [r4, #0]
 8004dac:	6961      	ldr	r1, [r4, #20]
 8004dae:	1d18      	adds	r0, r3, #4
 8004db0:	6028      	str	r0, [r5, #0]
 8004db2:	0635      	lsls	r5, r6, #24
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	d501      	bpl.n	8004dbc <_printf_i+0x1cc>
 8004db8:	6019      	str	r1, [r3, #0]
 8004dba:	e002      	b.n	8004dc2 <_printf_i+0x1d2>
 8004dbc:	0670      	lsls	r0, r6, #25
 8004dbe:	d5fb      	bpl.n	8004db8 <_printf_i+0x1c8>
 8004dc0:	8019      	strh	r1, [r3, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	4615      	mov	r5, r2
 8004dc8:	e7ba      	b.n	8004d40 <_printf_i+0x150>
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	1d1a      	adds	r2, r3, #4
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	6862      	ldr	r2, [r4, #4]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7fb fa02 	bl	80001e0 <memchr>
 8004ddc:	b108      	cbz	r0, 8004de2 <_printf_i+0x1f2>
 8004dde:	1b40      	subs	r0, r0, r5
 8004de0:	6060      	str	r0, [r4, #4]
 8004de2:	6863      	ldr	r3, [r4, #4]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	2300      	movs	r3, #0
 8004de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dec:	e7a8      	b.n	8004d40 <_printf_i+0x150>
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	462a      	mov	r2, r5
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	47d0      	blx	sl
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d0ab      	beq.n	8004d54 <_printf_i+0x164>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	079b      	lsls	r3, r3, #30
 8004e00:	d413      	bmi.n	8004e2a <_printf_i+0x23a>
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	4298      	cmp	r0, r3
 8004e08:	bfb8      	it	lt
 8004e0a:	4618      	movlt	r0, r3
 8004e0c:	e7a4      	b.n	8004d58 <_printf_i+0x168>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4632      	mov	r2, r6
 8004e12:	4649      	mov	r1, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	47d0      	blx	sl
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d09b      	beq.n	8004d54 <_printf_i+0x164>
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	9903      	ldr	r1, [sp, #12]
 8004e22:	1a5b      	subs	r3, r3, r1
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dcf2      	bgt.n	8004e0e <_printf_i+0x21e>
 8004e28:	e7eb      	b.n	8004e02 <_printf_i+0x212>
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	f104 0619 	add.w	r6, r4, #25
 8004e30:	e7f5      	b.n	8004e1e <_printf_i+0x22e>
 8004e32:	bf00      	nop
 8004e34:	080054f1 	.word	0x080054f1
 8004e38:	08005502 	.word	0x08005502

08004e3c <_sbrk_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d06      	ldr	r5, [pc, #24]	; (8004e58 <_sbrk_r+0x1c>)
 8004e40:	2300      	movs	r3, #0
 8004e42:	4604      	mov	r4, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	602b      	str	r3, [r5, #0]
 8004e48:	f7fc fb14 	bl	8001474 <_sbrk>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_sbrk_r+0x1a>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_sbrk_r+0x1a>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	20000258 	.word	0x20000258

08004e5c <__sread>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	460c      	mov	r4, r1
 8004e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e64:	f000 fab2 	bl	80053cc <_read_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	bfab      	itete	ge
 8004e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e70:	181b      	addge	r3, r3, r0
 8004e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e76:	bfac      	ite	ge
 8004e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e7a:	81a3      	strhlt	r3, [r4, #12]
 8004e7c:	bd10      	pop	{r4, pc}

08004e7e <__swrite>:
 8004e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e82:	461f      	mov	r7, r3
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	05db      	lsls	r3, r3, #23
 8004e88:	4605      	mov	r5, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	d505      	bpl.n	8004e9c <__swrite+0x1e>
 8004e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e94:	2302      	movs	r3, #2
 8004e96:	2200      	movs	r2, #0
 8004e98:	f000 f9c8 	bl	800522c <_lseek_r>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	463b      	mov	r3, r7
 8004eac:	4628      	mov	r0, r5
 8004eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb2:	f000 b869 	b.w	8004f88 <_write_r>

08004eb6 <__sseek>:
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	460c      	mov	r4, r1
 8004eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebe:	f000 f9b5 	bl	800522c <_lseek_r>
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	bf15      	itete	ne
 8004ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ed2:	81a3      	strheq	r3, [r4, #12]
 8004ed4:	bf18      	it	ne
 8004ed6:	81a3      	strhne	r3, [r4, #12]
 8004ed8:	bd10      	pop	{r4, pc}

08004eda <__sclose>:
 8004eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ede:	f000 b8d3 	b.w	8005088 <_close_r>
	...

08004ee4 <__swbuf_r>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	460e      	mov	r6, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	4605      	mov	r5, r0
 8004eec:	b118      	cbz	r0, 8004ef6 <__swbuf_r+0x12>
 8004eee:	6983      	ldr	r3, [r0, #24]
 8004ef0:	b90b      	cbnz	r3, 8004ef6 <__swbuf_r+0x12>
 8004ef2:	f7ff fb81 	bl	80045f8 <__sinit>
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <__swbuf_r+0x98>)
 8004ef8:	429c      	cmp	r4, r3
 8004efa:	d12b      	bne.n	8004f54 <__swbuf_r+0x70>
 8004efc:	686c      	ldr	r4, [r5, #4]
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	60a3      	str	r3, [r4, #8]
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	071a      	lsls	r2, r3, #28
 8004f06:	d52f      	bpl.n	8004f68 <__swbuf_r+0x84>
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	b36b      	cbz	r3, 8004f68 <__swbuf_r+0x84>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1ac0      	subs	r0, r0, r3
 8004f12:	6963      	ldr	r3, [r4, #20]
 8004f14:	b2f6      	uxtb	r6, r6
 8004f16:	4283      	cmp	r3, r0
 8004f18:	4637      	mov	r7, r6
 8004f1a:	dc04      	bgt.n	8004f26 <__swbuf_r+0x42>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f948 	bl	80051b4 <_fflush_r>
 8004f24:	bb30      	cbnz	r0, 8004f74 <__swbuf_r+0x90>
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60a3      	str	r3, [r4, #8]
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	701e      	strb	r6, [r3, #0]
 8004f34:	6963      	ldr	r3, [r4, #20]
 8004f36:	3001      	adds	r0, #1
 8004f38:	4283      	cmp	r3, r0
 8004f3a:	d004      	beq.n	8004f46 <__swbuf_r+0x62>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	07db      	lsls	r3, r3, #31
 8004f40:	d506      	bpl.n	8004f50 <__swbuf_r+0x6c>
 8004f42:	2e0a      	cmp	r6, #10
 8004f44:	d104      	bne.n	8004f50 <__swbuf_r+0x6c>
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f933 	bl	80051b4 <_fflush_r>
 8004f4e:	b988      	cbnz	r0, 8004f74 <__swbuf_r+0x90>
 8004f50:	4638      	mov	r0, r7
 8004f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <__swbuf_r+0x9c>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	d101      	bne.n	8004f5e <__swbuf_r+0x7a>
 8004f5a:	68ac      	ldr	r4, [r5, #8]
 8004f5c:	e7cf      	b.n	8004efe <__swbuf_r+0x1a>
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <__swbuf_r+0xa0>)
 8004f60:	429c      	cmp	r4, r3
 8004f62:	bf08      	it	eq
 8004f64:	68ec      	ldreq	r4, [r5, #12]
 8004f66:	e7ca      	b.n	8004efe <__swbuf_r+0x1a>
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f81e 	bl	8004fac <__swsetup_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0cb      	beq.n	8004f0c <__swbuf_r+0x28>
 8004f74:	f04f 37ff 	mov.w	r7, #4294967295
 8004f78:	e7ea      	b.n	8004f50 <__swbuf_r+0x6c>
 8004f7a:	bf00      	nop
 8004f7c:	080054a0 	.word	0x080054a0
 8004f80:	080054c0 	.word	0x080054c0
 8004f84:	08005480 	.word	0x08005480

08004f88 <_write_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d07      	ldr	r5, [pc, #28]	; (8004fa8 <_write_r+0x20>)
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4611      	mov	r1, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	602a      	str	r2, [r5, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f7fc f822 	bl	8000fe0 <_write>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_write_r+0x1e>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_write_r+0x1e>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	20000258 	.word	0x20000258

08004fac <__swsetup_r>:
 8004fac:	4b32      	ldr	r3, [pc, #200]	; (8005078 <__swsetup_r+0xcc>)
 8004fae:	b570      	push	{r4, r5, r6, lr}
 8004fb0:	681d      	ldr	r5, [r3, #0]
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	b125      	cbz	r5, 8004fc2 <__swsetup_r+0x16>
 8004fb8:	69ab      	ldr	r3, [r5, #24]
 8004fba:	b913      	cbnz	r3, 8004fc2 <__swsetup_r+0x16>
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7ff fb1b 	bl	80045f8 <__sinit>
 8004fc2:	4b2e      	ldr	r3, [pc, #184]	; (800507c <__swsetup_r+0xd0>)
 8004fc4:	429c      	cmp	r4, r3
 8004fc6:	d10f      	bne.n	8004fe8 <__swsetup_r+0x3c>
 8004fc8:	686c      	ldr	r4, [r5, #4]
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fd0:	0719      	lsls	r1, r3, #28
 8004fd2:	d42c      	bmi.n	800502e <__swsetup_r+0x82>
 8004fd4:	06dd      	lsls	r5, r3, #27
 8004fd6:	d411      	bmi.n	8004ffc <__swsetup_r+0x50>
 8004fd8:	2309      	movs	r3, #9
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	e03e      	b.n	8005066 <__swsetup_r+0xba>
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <__swsetup_r+0xd4>)
 8004fea:	429c      	cmp	r4, r3
 8004fec:	d101      	bne.n	8004ff2 <__swsetup_r+0x46>
 8004fee:	68ac      	ldr	r4, [r5, #8]
 8004ff0:	e7eb      	b.n	8004fca <__swsetup_r+0x1e>
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <__swsetup_r+0xd8>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	bf08      	it	eq
 8004ff8:	68ec      	ldreq	r4, [r5, #12]
 8004ffa:	e7e6      	b.n	8004fca <__swsetup_r+0x1e>
 8004ffc:	0758      	lsls	r0, r3, #29
 8004ffe:	d512      	bpl.n	8005026 <__swsetup_r+0x7a>
 8005000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005002:	b141      	cbz	r1, 8005016 <__swsetup_r+0x6a>
 8005004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005008:	4299      	cmp	r1, r3
 800500a:	d002      	beq.n	8005012 <__swsetup_r+0x66>
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f991 	bl	8005334 <_free_r>
 8005012:	2300      	movs	r3, #0
 8005014:	6363      	str	r3, [r4, #52]	; 0x34
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	2300      	movs	r3, #0
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f043 0308 	orr.w	r3, r3, #8
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	b94b      	cbnz	r3, 8005046 <__swsetup_r+0x9a>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503c:	d003      	beq.n	8005046 <__swsetup_r+0x9a>
 800503e:	4621      	mov	r1, r4
 8005040:	4630      	mov	r0, r6
 8005042:	f000 f92b 	bl	800529c <__smakebuf_r>
 8005046:	89a0      	ldrh	r0, [r4, #12]
 8005048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800504c:	f010 0301 	ands.w	r3, r0, #1
 8005050:	d00a      	beq.n	8005068 <__swsetup_r+0xbc>
 8005052:	2300      	movs	r3, #0
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	6963      	ldr	r3, [r4, #20]
 8005058:	425b      	negs	r3, r3
 800505a:	61a3      	str	r3, [r4, #24]
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	b943      	cbnz	r3, 8005072 <__swsetup_r+0xc6>
 8005060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005064:	d1ba      	bne.n	8004fdc <__swsetup_r+0x30>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	0781      	lsls	r1, r0, #30
 800506a:	bf58      	it	pl
 800506c:	6963      	ldrpl	r3, [r4, #20]
 800506e:	60a3      	str	r3, [r4, #8]
 8005070:	e7f4      	b.n	800505c <__swsetup_r+0xb0>
 8005072:	2000      	movs	r0, #0
 8005074:	e7f7      	b.n	8005066 <__swsetup_r+0xba>
 8005076:	bf00      	nop
 8005078:	20000010 	.word	0x20000010
 800507c:	080054a0 	.word	0x080054a0
 8005080:	080054c0 	.word	0x080054c0
 8005084:	08005480 	.word	0x08005480

08005088 <_close_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d06      	ldr	r5, [pc, #24]	; (80050a4 <_close_r+0x1c>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	602b      	str	r3, [r5, #0]
 8005094:	f7fc f9b9 	bl	800140a <_close>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_close_r+0x1a>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_close_r+0x1a>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	20000258 	.word	0x20000258

080050a8 <__sflush_r>:
 80050a8:	898a      	ldrh	r2, [r1, #12]
 80050aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ae:	4605      	mov	r5, r0
 80050b0:	0710      	lsls	r0, r2, #28
 80050b2:	460c      	mov	r4, r1
 80050b4:	d458      	bmi.n	8005168 <__sflush_r+0xc0>
 80050b6:	684b      	ldr	r3, [r1, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dc05      	bgt.n	80050c8 <__sflush_r+0x20>
 80050bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dc02      	bgt.n	80050c8 <__sflush_r+0x20>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	d0f9      	beq.n	80050c2 <__sflush_r+0x1a>
 80050ce:	2300      	movs	r3, #0
 80050d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050d4:	682f      	ldr	r7, [r5, #0]
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	d032      	beq.n	8005140 <__sflush_r+0x98>
 80050da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	075a      	lsls	r2, r3, #29
 80050e0:	d505      	bpl.n	80050ee <__sflush_r+0x46>
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	1ac0      	subs	r0, r0, r3
 80050e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050e8:	b10b      	cbz	r3, 80050ee <__sflush_r+0x46>
 80050ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ec:	1ac0      	subs	r0, r0, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	4602      	mov	r2, r0
 80050f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050f4:	6a21      	ldr	r1, [r4, #32]
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b0      	blx	r6
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	d106      	bne.n	800510e <__sflush_r+0x66>
 8005100:	6829      	ldr	r1, [r5, #0]
 8005102:	291d      	cmp	r1, #29
 8005104:	d82c      	bhi.n	8005160 <__sflush_r+0xb8>
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <__sflush_r+0x108>)
 8005108:	40ca      	lsrs	r2, r1
 800510a:	07d6      	lsls	r6, r2, #31
 800510c:	d528      	bpl.n	8005160 <__sflush_r+0xb8>
 800510e:	2200      	movs	r2, #0
 8005110:	6062      	str	r2, [r4, #4]
 8005112:	04d9      	lsls	r1, r3, #19
 8005114:	6922      	ldr	r2, [r4, #16]
 8005116:	6022      	str	r2, [r4, #0]
 8005118:	d504      	bpl.n	8005124 <__sflush_r+0x7c>
 800511a:	1c42      	adds	r2, r0, #1
 800511c:	d101      	bne.n	8005122 <__sflush_r+0x7a>
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	b903      	cbnz	r3, 8005124 <__sflush_r+0x7c>
 8005122:	6560      	str	r0, [r4, #84]	; 0x54
 8005124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005126:	602f      	str	r7, [r5, #0]
 8005128:	2900      	cmp	r1, #0
 800512a:	d0ca      	beq.n	80050c2 <__sflush_r+0x1a>
 800512c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__sflush_r+0x92>
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f8fd 	bl	8005334 <_free_r>
 800513a:	2000      	movs	r0, #0
 800513c:	6360      	str	r0, [r4, #52]	; 0x34
 800513e:	e7c1      	b.n	80050c4 <__sflush_r+0x1c>
 8005140:	6a21      	ldr	r1, [r4, #32]
 8005142:	2301      	movs	r3, #1
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	1c41      	adds	r1, r0, #1
 800514a:	d1c7      	bne.n	80050dc <__sflush_r+0x34>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0c4      	beq.n	80050dc <__sflush_r+0x34>
 8005152:	2b1d      	cmp	r3, #29
 8005154:	d001      	beq.n	800515a <__sflush_r+0xb2>
 8005156:	2b16      	cmp	r3, #22
 8005158:	d101      	bne.n	800515e <__sflush_r+0xb6>
 800515a:	602f      	str	r7, [r5, #0]
 800515c:	e7b1      	b.n	80050c2 <__sflush_r+0x1a>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	e7ad      	b.n	80050c4 <__sflush_r+0x1c>
 8005168:	690f      	ldr	r7, [r1, #16]
 800516a:	2f00      	cmp	r7, #0
 800516c:	d0a9      	beq.n	80050c2 <__sflush_r+0x1a>
 800516e:	0793      	lsls	r3, r2, #30
 8005170:	680e      	ldr	r6, [r1, #0]
 8005172:	bf08      	it	eq
 8005174:	694b      	ldreq	r3, [r1, #20]
 8005176:	600f      	str	r7, [r1, #0]
 8005178:	bf18      	it	ne
 800517a:	2300      	movne	r3, #0
 800517c:	eba6 0807 	sub.w	r8, r6, r7
 8005180:	608b      	str	r3, [r1, #8]
 8005182:	f1b8 0f00 	cmp.w	r8, #0
 8005186:	dd9c      	ble.n	80050c2 <__sflush_r+0x1a>
 8005188:	6a21      	ldr	r1, [r4, #32]
 800518a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800518c:	4643      	mov	r3, r8
 800518e:	463a      	mov	r2, r7
 8005190:	4628      	mov	r0, r5
 8005192:	47b0      	blx	r6
 8005194:	2800      	cmp	r0, #0
 8005196:	dc06      	bgt.n	80051a6 <__sflush_r+0xfe>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e78e      	b.n	80050c4 <__sflush_r+0x1c>
 80051a6:	4407      	add	r7, r0
 80051a8:	eba8 0800 	sub.w	r8, r8, r0
 80051ac:	e7e9      	b.n	8005182 <__sflush_r+0xda>
 80051ae:	bf00      	nop
 80051b0:	20400001 	.word	0x20400001

080051b4 <_fflush_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	690b      	ldr	r3, [r1, #16]
 80051b8:	4605      	mov	r5, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	b913      	cbnz	r3, 80051c4 <_fflush_r+0x10>
 80051be:	2500      	movs	r5, #0
 80051c0:	4628      	mov	r0, r5
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	b118      	cbz	r0, 80051ce <_fflush_r+0x1a>
 80051c6:	6983      	ldr	r3, [r0, #24]
 80051c8:	b90b      	cbnz	r3, 80051ce <_fflush_r+0x1a>
 80051ca:	f7ff fa15 	bl	80045f8 <__sinit>
 80051ce:	4b14      	ldr	r3, [pc, #80]	; (8005220 <_fflush_r+0x6c>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d11b      	bne.n	800520c <_fflush_r+0x58>
 80051d4:	686c      	ldr	r4, [r5, #4]
 80051d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ef      	beq.n	80051be <_fflush_r+0xa>
 80051de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051e0:	07d0      	lsls	r0, r2, #31
 80051e2:	d404      	bmi.n	80051ee <_fflush_r+0x3a>
 80051e4:	0599      	lsls	r1, r3, #22
 80051e6:	d402      	bmi.n	80051ee <_fflush_r+0x3a>
 80051e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ea:	f7ff faa3 	bl	8004734 <__retarget_lock_acquire_recursive>
 80051ee:	4628      	mov	r0, r5
 80051f0:	4621      	mov	r1, r4
 80051f2:	f7ff ff59 	bl	80050a8 <__sflush_r>
 80051f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f8:	07da      	lsls	r2, r3, #31
 80051fa:	4605      	mov	r5, r0
 80051fc:	d4e0      	bmi.n	80051c0 <_fflush_r+0xc>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	059b      	lsls	r3, r3, #22
 8005202:	d4dd      	bmi.n	80051c0 <_fflush_r+0xc>
 8005204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005206:	f7ff fa96 	bl	8004736 <__retarget_lock_release_recursive>
 800520a:	e7d9      	b.n	80051c0 <_fflush_r+0xc>
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <_fflush_r+0x70>)
 800520e:	429c      	cmp	r4, r3
 8005210:	d101      	bne.n	8005216 <_fflush_r+0x62>
 8005212:	68ac      	ldr	r4, [r5, #8]
 8005214:	e7df      	b.n	80051d6 <_fflush_r+0x22>
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <_fflush_r+0x74>)
 8005218:	429c      	cmp	r4, r3
 800521a:	bf08      	it	eq
 800521c:	68ec      	ldreq	r4, [r5, #12]
 800521e:	e7da      	b.n	80051d6 <_fflush_r+0x22>
 8005220:	080054a0 	.word	0x080054a0
 8005224:	080054c0 	.word	0x080054c0
 8005228:	08005480 	.word	0x08005480

0800522c <_lseek_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	; (800524c <_lseek_r+0x20>)
 8005230:	4604      	mov	r4, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	602a      	str	r2, [r5, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fc f90c 	bl	8001458 <_lseek>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_lseek_r+0x1e>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_lseek_r+0x1e>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000258 	.word	0x20000258

08005250 <__swhatbuf_r>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	460e      	mov	r6, r1
 8005254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005258:	2900      	cmp	r1, #0
 800525a:	b096      	sub	sp, #88	; 0x58
 800525c:	4614      	mov	r4, r2
 800525e:	461d      	mov	r5, r3
 8005260:	da08      	bge.n	8005274 <__swhatbuf_r+0x24>
 8005262:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	061a      	lsls	r2, r3, #24
 800526c:	d410      	bmi.n	8005290 <__swhatbuf_r+0x40>
 800526e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005272:	e00e      	b.n	8005292 <__swhatbuf_r+0x42>
 8005274:	466a      	mov	r2, sp
 8005276:	f000 f8bb 	bl	80053f0 <_fstat_r>
 800527a:	2800      	cmp	r0, #0
 800527c:	dbf1      	blt.n	8005262 <__swhatbuf_r+0x12>
 800527e:	9a01      	ldr	r2, [sp, #4]
 8005280:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005284:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005288:	425a      	negs	r2, r3
 800528a:	415a      	adcs	r2, r3
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	e7ee      	b.n	800526e <__swhatbuf_r+0x1e>
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	2000      	movs	r0, #0
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	b016      	add	sp, #88	; 0x58
 8005298:	bd70      	pop	{r4, r5, r6, pc}
	...

0800529c <__smakebuf_r>:
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052a0:	079d      	lsls	r5, r3, #30
 80052a2:	4606      	mov	r6, r0
 80052a4:	460c      	mov	r4, r1
 80052a6:	d507      	bpl.n	80052b8 <__smakebuf_r+0x1c>
 80052a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2301      	movs	r3, #1
 80052b2:	6163      	str	r3, [r4, #20]
 80052b4:	b002      	add	sp, #8
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	ab01      	add	r3, sp, #4
 80052ba:	466a      	mov	r2, sp
 80052bc:	f7ff ffc8 	bl	8005250 <__swhatbuf_r>
 80052c0:	9900      	ldr	r1, [sp, #0]
 80052c2:	4605      	mov	r5, r0
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff fa57 	bl	8004778 <_malloc_r>
 80052ca:	b948      	cbnz	r0, 80052e0 <__smakebuf_r+0x44>
 80052cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d0:	059a      	lsls	r2, r3, #22
 80052d2:	d4ef      	bmi.n	80052b4 <__smakebuf_r+0x18>
 80052d4:	f023 0303 	bic.w	r3, r3, #3
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	e7e3      	b.n	80052a8 <__smakebuf_r+0xc>
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <__smakebuf_r+0x7c>)
 80052e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	6020      	str	r0, [r4, #0]
 80052e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	6163      	str	r3, [r4, #20]
 80052f2:	9b01      	ldr	r3, [sp, #4]
 80052f4:	6120      	str	r0, [r4, #16]
 80052f6:	b15b      	cbz	r3, 8005310 <__smakebuf_r+0x74>
 80052f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f889 	bl	8005414 <_isatty_r>
 8005302:	b128      	cbz	r0, 8005310 <__smakebuf_r+0x74>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	89a0      	ldrh	r0, [r4, #12]
 8005312:	4305      	orrs	r5, r0
 8005314:	81a5      	strh	r5, [r4, #12]
 8005316:	e7cd      	b.n	80052b4 <__smakebuf_r+0x18>
 8005318:	08004591 	.word	0x08004591

0800531c <__malloc_lock>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__malloc_lock+0x8>)
 800531e:	f7ff ba09 	b.w	8004734 <__retarget_lock_acquire_recursive>
 8005322:	bf00      	nop
 8005324:	2000024c 	.word	0x2000024c

08005328 <__malloc_unlock>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__malloc_unlock+0x8>)
 800532a:	f7ff ba04 	b.w	8004736 <__retarget_lock_release_recursive>
 800532e:	bf00      	nop
 8005330:	2000024c 	.word	0x2000024c

08005334 <_free_r>:
 8005334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005336:	2900      	cmp	r1, #0
 8005338:	d044      	beq.n	80053c4 <_free_r+0x90>
 800533a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800533e:	9001      	str	r0, [sp, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f1a1 0404 	sub.w	r4, r1, #4
 8005346:	bfb8      	it	lt
 8005348:	18e4      	addlt	r4, r4, r3
 800534a:	f7ff ffe7 	bl	800531c <__malloc_lock>
 800534e:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <_free_r+0x94>)
 8005350:	9801      	ldr	r0, [sp, #4]
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	b933      	cbnz	r3, 8005364 <_free_r+0x30>
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	6014      	str	r4, [r2, #0]
 800535a:	b003      	add	sp, #12
 800535c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005360:	f7ff bfe2 	b.w	8005328 <__malloc_unlock>
 8005364:	42a3      	cmp	r3, r4
 8005366:	d908      	bls.n	800537a <_free_r+0x46>
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	1961      	adds	r1, r4, r5
 800536c:	428b      	cmp	r3, r1
 800536e:	bf01      	itttt	eq
 8005370:	6819      	ldreq	r1, [r3, #0]
 8005372:	685b      	ldreq	r3, [r3, #4]
 8005374:	1949      	addeq	r1, r1, r5
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	e7ed      	b.n	8005356 <_free_r+0x22>
 800537a:	461a      	mov	r2, r3
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b10b      	cbz	r3, 8005384 <_free_r+0x50>
 8005380:	42a3      	cmp	r3, r4
 8005382:	d9fa      	bls.n	800537a <_free_r+0x46>
 8005384:	6811      	ldr	r1, [r2, #0]
 8005386:	1855      	adds	r5, r2, r1
 8005388:	42a5      	cmp	r5, r4
 800538a:	d10b      	bne.n	80053a4 <_free_r+0x70>
 800538c:	6824      	ldr	r4, [r4, #0]
 800538e:	4421      	add	r1, r4
 8005390:	1854      	adds	r4, r2, r1
 8005392:	42a3      	cmp	r3, r4
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	d1e0      	bne.n	800535a <_free_r+0x26>
 8005398:	681c      	ldr	r4, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	6053      	str	r3, [r2, #4]
 800539e:	4421      	add	r1, r4
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	e7da      	b.n	800535a <_free_r+0x26>
 80053a4:	d902      	bls.n	80053ac <_free_r+0x78>
 80053a6:	230c      	movs	r3, #12
 80053a8:	6003      	str	r3, [r0, #0]
 80053aa:	e7d6      	b.n	800535a <_free_r+0x26>
 80053ac:	6825      	ldr	r5, [r4, #0]
 80053ae:	1961      	adds	r1, r4, r5
 80053b0:	428b      	cmp	r3, r1
 80053b2:	bf04      	itt	eq
 80053b4:	6819      	ldreq	r1, [r3, #0]
 80053b6:	685b      	ldreq	r3, [r3, #4]
 80053b8:	6063      	str	r3, [r4, #4]
 80053ba:	bf04      	itt	eq
 80053bc:	1949      	addeq	r1, r1, r5
 80053be:	6021      	streq	r1, [r4, #0]
 80053c0:	6054      	str	r4, [r2, #4]
 80053c2:	e7ca      	b.n	800535a <_free_r+0x26>
 80053c4:	b003      	add	sp, #12
 80053c6:	bd30      	pop	{r4, r5, pc}
 80053c8:	20000250 	.word	0x20000250

080053cc <_read_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d07      	ldr	r5, [pc, #28]	; (80053ec <_read_r+0x20>)
 80053d0:	4604      	mov	r4, r0
 80053d2:	4608      	mov	r0, r1
 80053d4:	4611      	mov	r1, r2
 80053d6:	2200      	movs	r2, #0
 80053d8:	602a      	str	r2, [r5, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f7fb fff8 	bl	80013d0 <_read>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_read_r+0x1e>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_read_r+0x1e>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000258 	.word	0x20000258

080053f0 <_fstat_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d07      	ldr	r5, [pc, #28]	; (8005410 <_fstat_r+0x20>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	f7fc f810 	bl	8001422 <_fstat>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d102      	bne.n	800540c <_fstat_r+0x1c>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	b103      	cbz	r3, 800540c <_fstat_r+0x1c>
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	bf00      	nop
 8005410:	20000258 	.word	0x20000258

08005414 <_isatty_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d06      	ldr	r5, [pc, #24]	; (8005430 <_isatty_r+0x1c>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	f7fc f80f 	bl	8001442 <_isatty>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_isatty_r+0x1a>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_isatty_r+0x1a>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000258 	.word	0x20000258

08005434 <_init>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr

08005440 <_fini>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr
